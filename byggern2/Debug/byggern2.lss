
byggern2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000042a  000004be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  000004c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b8  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077b  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c1  00000000  00000000  000015d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001994  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d0  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000026  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001e16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea e2       	ldi	r30, 0x2A	; 42
  84:	f4 e0       	ldi	r31, 0x04	; 4
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 30       	cpi	r26, 0x06	; 6
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e0       	ldi	r26, 0x06	; 6
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 31       	cpi	r26, 0x10	; 16
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  a6:	0c 94 13 02 	jmp	0x426	; 0x426 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <uart_test>:
 */ 

#include "test.h"

void uart_test(){
	uart_init(MYUBRR);
  ae:	8f e1       	ldi	r24, 0x1F	; 31
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 70 00 	call	0xe0	; 0xe0 <uart_init>
	fdevopen(uart_write, uart_read);
  b6:	6b e7       	ldi	r22, 0x7B	; 123
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	87 e7       	ldi	r24, 0x77	; 119
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 84 00 	call	0x108	; 0x108 <fdevopen>
	
	while(1){
		uart_write(uart_read()+1);
  c2:	0e 94 7b 00 	call	0xf6	; 0xf6 <uart_read>
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	0e 94 77 00 	call	0xee	; 0xee <uart_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	9e e0       	ldi	r25, 0x0E	; 14
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <uart_test+0x24>
  da:	00 c0       	rjmp	.+0      	; 0xdc <uart_test+0x2e>
  dc:	00 00       	nop
  de:	f1 cf       	rjmp	.-30     	; 0xc2 <uart_test+0x14>

000000e0 <uart_init>:

#include "uart.h"

void uart_init(unsigned int ubrr){
	//Set baud rate, divided into two registers
	UBRR0H = (unsigned char)(ubrr>>8); //high register, alt får egt plass på 8 bit så derfor blir det 0
  e0:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr; //low register
  e2:	89 b9       	out	0x09, r24	; 9
				
	/* Enable receiver and transmitter 
	hvor mange bit data: man kan ha 5-9 bit, vi vil ha 8
	hvor mange stop-bit: 2 stk, pga ignorerer det første bitet*/
			
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	8a b9       	out	0x0a, r24	; 10
	//UCSR0C = (1 << URSEL0)|(1<< USBS0)|(1 << UCSZ01)|(1 << UCSZ00); //Setter USBS0 -> 1 (2 stop bit), setter UCSZ2:0 -> 011 (8 bit data) [side 189 ATmega162/V]		
	UCSR0C = (1 << URSEL0)|(1<< USBS0)|(3 << UCSZ00);
  e8:	8e e8       	ldi	r24, 0x8E	; 142
  ea:	80 bd       	out	0x20, r24	; 32
  ec:	08 95       	ret

000000ee <uart_write>:
void uart_write(unsigned char letter){
	/*1. Sjekke om det er klart til å sende ny data
	2. sende ny data*/
	 
	//loop_until_bit_is_set(UCSR0A, UDRE0); //5 pga UDRE0 er på plass 5 (UDRE0 er 1 hvis UDR0 er tomt, klar til å sende på nytt )
	while(!(UCSR0A & (1<<UDRE0))){
  ee:	5d 9b       	sbis	0x0b, 5	; 11
  f0:	fe cf       	rjmp	.-4      	; 0xee <uart_write>
		;
	}
	UDR0 = letter;
  f2:	8c b9       	out	0x0c, r24	; 12
  f4:	08 95       	ret

000000f6 <uart_read>:
}

unsigned char uart_read(){
	//loop_until_bit_is_set(UCSR0A, RXC0); //RXC0 er på plass 7, RXC0 = rx complete, høy når complete 
	while (!(UCSR0A & (1 << RXC0))){
  f6:	5f 9b       	sbis	0x0b, 7	; 11
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <uart_read>
		
	}
	return UDR0;
  fa:	8c b1       	in	r24, 0x0c	; 12
}
  fc:	08 95       	ret

000000fe <main>:
#include "test.h"


int main(void)
{	
	uart_test();
  fe:	0e 94 57 00 	call	0xae	; 0xae <uart_test>
	
}
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	08 95       	ret

00000108 <fdevopen>:
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	00 97       	sbiw	r24, 0x00	; 0
 112:	31 f4       	brne	.+12     	; 0x120 <fdevopen+0x18>
 114:	61 15       	cp	r22, r1
 116:	71 05       	cpc	r23, r1
 118:	19 f4       	brne	.+6      	; 0x120 <fdevopen+0x18>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	3a c0       	rjmp	.+116    	; 0x194 <fdevopen+0x8c>
 120:	8b 01       	movw	r16, r22
 122:	ec 01       	movw	r28, r24
 124:	6e e0       	ldi	r22, 0x0E	; 14
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 cf 00 	call	0x19e	; 0x19e <calloc>
 130:	fc 01       	movw	r30, r24
 132:	89 2b       	or	r24, r25
 134:	91 f3       	breq	.-28     	; 0x11a <fdevopen+0x12>
 136:	80 e8       	ldi	r24, 0x80	; 128
 138:	83 83       	std	Z+3, r24	; 0x03
 13a:	01 15       	cp	r16, r1
 13c:	11 05       	cpc	r17, r1
 13e:	71 f0       	breq	.+28     	; 0x15c <fdevopen+0x54>
 140:	13 87       	std	Z+11, r17	; 0x0b
 142:	02 87       	std	Z+10, r16	; 0x0a
 144:	81 e8       	ldi	r24, 0x81	; 129
 146:	83 83       	std	Z+3, r24	; 0x03
 148:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 14c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 150:	89 2b       	or	r24, r25
 152:	21 f4       	brne	.+8      	; 0x15c <fdevopen+0x54>
 154:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
 158:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
 15c:	20 97       	sbiw	r28, 0x00	; 0
 15e:	c9 f0       	breq	.+50     	; 0x192 <fdevopen+0x8a>
 160:	d1 87       	std	Z+9, r29	; 0x09
 162:	c0 87       	std	Z+8, r28	; 0x08
 164:	83 81       	ldd	r24, Z+3	; 0x03
 166:	82 60       	ori	r24, 0x02	; 2
 168:	83 83       	std	Z+3, r24	; 0x03
 16a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x2>
 16e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x3>
 172:	89 2b       	or	r24, r25
 174:	71 f4       	brne	.+28     	; 0x192 <fdevopen+0x8a>
 176:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__data_end+0x3>
 17a:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__data_end+0x2>
 17e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end+0x4>
 182:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x5>
 186:	89 2b       	or	r24, r25
 188:	21 f4       	brne	.+8      	; 0x192 <fdevopen+0x8a>
 18a:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <__data_end+0x5>
 18e:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <__data_end+0x4>
 192:	cf 01       	movw	r24, r30
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	08 95       	ret

0000019e <calloc>:
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	86 9f       	mul	r24, r22
 1a8:	80 01       	movw	r16, r0
 1aa:	87 9f       	mul	r24, r23
 1ac:	10 0d       	add	r17, r0
 1ae:	96 9f       	mul	r25, r22
 1b0:	10 0d       	add	r17, r0
 1b2:	11 24       	eor	r1, r1
 1b4:	c8 01       	movw	r24, r16
 1b6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <malloc>
 1ba:	ec 01       	movw	r28, r24
 1bc:	00 97       	sbiw	r24, 0x00	; 0
 1be:	29 f0       	breq	.+10     	; 0x1ca <calloc+0x2c>
 1c0:	a8 01       	movw	r20, r16
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	0e 94 0c 02 	call	0x418	; 0x418 <memset>
 1ca:	ce 01       	movw	r24, r28
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	08 95       	ret

000001d6 <malloc>:
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	91 05       	cpc	r25, r1
 1e2:	10 f4       	brcc	.+4      	; 0x1e8 <malloc+0x12>
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__flp>
 1ec:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__flp+0x1>
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	a0 e0       	ldi	r26, 0x00	; 0
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	30 97       	sbiw	r30, 0x00	; 0
 1fa:	19 f1       	breq	.+70     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
 1fc:	40 81       	ld	r20, Z
 1fe:	51 81       	ldd	r21, Z+1	; 0x01
 200:	02 81       	ldd	r16, Z+2	; 0x02
 202:	13 81       	ldd	r17, Z+3	; 0x03
 204:	48 17       	cp	r20, r24
 206:	59 07       	cpc	r21, r25
 208:	c8 f0       	brcs	.+50     	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
 20a:	84 17       	cp	r24, r20
 20c:	95 07       	cpc	r25, r21
 20e:	69 f4       	brne	.+26     	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
 210:	10 97       	sbiw	r26, 0x00	; 0
 212:	31 f0       	breq	.+12     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 214:	12 96       	adiw	r26, 0x02	; 2
 216:	0c 93       	st	X, r16
 218:	12 97       	sbiw	r26, 0x02	; 2
 21a:	13 96       	adiw	r26, 0x03	; 3
 21c:	1c 93       	st	X, r17
 21e:	27 c0       	rjmp	.+78     	; 0x26e <__EEPROM_REGION_LENGTH__+0x6e>
 220:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <__flp>
 224:	10 93 0f 01 	sts	0x010F, r17	; 0x80010f <__flp+0x1>
 228:	22 c0       	rjmp	.+68     	; 0x26e <__EEPROM_REGION_LENGTH__+0x6e>
 22a:	21 15       	cp	r18, r1
 22c:	31 05       	cpc	r19, r1
 22e:	19 f0       	breq	.+6      	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
 230:	42 17       	cp	r20, r18
 232:	53 07       	cpc	r21, r19
 234:	18 f4       	brcc	.+6      	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
 236:	9a 01       	movw	r18, r20
 238:	bd 01       	movw	r22, r26
 23a:	ef 01       	movw	r28, r30
 23c:	df 01       	movw	r26, r30
 23e:	f8 01       	movw	r30, r16
 240:	db cf       	rjmp	.-74     	; 0x1f8 <malloc+0x22>
 242:	21 15       	cp	r18, r1
 244:	31 05       	cpc	r19, r1
 246:	f9 f0       	breq	.+62     	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
 248:	28 1b       	sub	r18, r24
 24a:	39 0b       	sbc	r19, r25
 24c:	24 30       	cpi	r18, 0x04	; 4
 24e:	31 05       	cpc	r19, r1
 250:	80 f4       	brcc	.+32     	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
 252:	8a 81       	ldd	r24, Y+2	; 0x02
 254:	9b 81       	ldd	r25, Y+3	; 0x03
 256:	61 15       	cp	r22, r1
 258:	71 05       	cpc	r23, r1
 25a:	21 f0       	breq	.+8      	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
 25c:	fb 01       	movw	r30, r22
 25e:	93 83       	std	Z+3, r25	; 0x03
 260:	82 83       	std	Z+2, r24	; 0x02
 262:	04 c0       	rjmp	.+8      	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
 264:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__flp+0x1>
 268:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__flp>
 26c:	fe 01       	movw	r30, r28
 26e:	32 96       	adiw	r30, 0x02	; 2
 270:	44 c0       	rjmp	.+136    	; 0x2fa <__EEPROM_REGION_LENGTH__+0xfa>
 272:	fe 01       	movw	r30, r28
 274:	e2 0f       	add	r30, r18
 276:	f3 1f       	adc	r31, r19
 278:	81 93       	st	Z+, r24
 27a:	91 93       	st	Z+, r25
 27c:	22 50       	subi	r18, 0x02	; 2
 27e:	31 09       	sbc	r19, r1
 280:	39 83       	std	Y+1, r19	; 0x01
 282:	28 83       	st	Y, r18
 284:	3a c0       	rjmp	.+116    	; 0x2fa <__EEPROM_REGION_LENGTH__+0xfa>
 286:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 28a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 28e:	23 2b       	or	r18, r19
 290:	41 f4       	brne	.+16     	; 0x2a2 <__EEPROM_REGION_LENGTH__+0xa2>
 292:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 296:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 29a:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__brkval+0x1>
 29e:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__brkval>
 2a2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2aa:	21 15       	cp	r18, r1
 2ac:	31 05       	cpc	r19, r1
 2ae:	41 f4       	brne	.+16     	; 0x2c0 <__EEPROM_REGION_LENGTH__+0xc0>
 2b0:	2d b7       	in	r18, 0x3d	; 61
 2b2:	3e b7       	in	r19, 0x3e	; 62
 2b4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 2b8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 2bc:	24 1b       	sub	r18, r20
 2be:	35 0b       	sbc	r19, r21
 2c0:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__brkval>
 2c4:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <__brkval+0x1>
 2c8:	e2 17       	cp	r30, r18
 2ca:	f3 07       	cpc	r31, r19
 2cc:	a0 f4       	brcc	.+40     	; 0x2f6 <__EEPROM_REGION_LENGTH__+0xf6>
 2ce:	2e 1b       	sub	r18, r30
 2d0:	3f 0b       	sbc	r19, r31
 2d2:	28 17       	cp	r18, r24
 2d4:	39 07       	cpc	r19, r25
 2d6:	78 f0       	brcs	.+30     	; 0x2f6 <__EEPROM_REGION_LENGTH__+0xf6>
 2d8:	ac 01       	movw	r20, r24
 2da:	4e 5f       	subi	r20, 0xFE	; 254
 2dc:	5f 4f       	sbci	r21, 0xFF	; 255
 2de:	24 17       	cp	r18, r20
 2e0:	35 07       	cpc	r19, r21
 2e2:	48 f0       	brcs	.+18     	; 0x2f6 <__EEPROM_REGION_LENGTH__+0xf6>
 2e4:	4e 0f       	add	r20, r30
 2e6:	5f 1f       	adc	r21, r31
 2e8:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <__brkval+0x1>
 2ec:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <__brkval>
 2f0:	81 93       	st	Z+, r24
 2f2:	91 93       	st	Z+, r25
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <__EEPROM_REGION_LENGTH__+0xfa>
 2f6:	e0 e0       	ldi	r30, 0x00	; 0
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	cf 01       	movw	r24, r30
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	08 95       	ret

00000306 <free>:
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	00 97       	sbiw	r24, 0x00	; 0
 30c:	09 f4       	brne	.+2      	; 0x310 <free+0xa>
 30e:	81 c0       	rjmp	.+258    	; 0x412 <__DATA_REGION_LENGTH__+0x12>
 310:	fc 01       	movw	r30, r24
 312:	32 97       	sbiw	r30, 0x02	; 2
 314:	13 82       	std	Z+3, r1	; 0x03
 316:	12 82       	std	Z+2, r1	; 0x02
 318:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__flp>
 31c:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__flp+0x1>
 320:	10 97       	sbiw	r26, 0x00	; 0
 322:	81 f4       	brne	.+32     	; 0x344 <free+0x3e>
 324:	20 81       	ld	r18, Z
 326:	31 81       	ldd	r19, Z+1	; 0x01
 328:	82 0f       	add	r24, r18
 32a:	93 1f       	adc	r25, r19
 32c:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 330:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 334:	28 17       	cp	r18, r24
 336:	39 07       	cpc	r19, r25
 338:	51 f5       	brne	.+84     	; 0x38e <free+0x88>
 33a:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <__brkval+0x1>
 33e:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <__brkval>
 342:	67 c0       	rjmp	.+206    	; 0x412 <__DATA_REGION_LENGTH__+0x12>
 344:	ed 01       	movw	r28, r26
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	ce 17       	cp	r28, r30
 34c:	df 07       	cpc	r29, r31
 34e:	40 f4       	brcc	.+16     	; 0x360 <free+0x5a>
 350:	4a 81       	ldd	r20, Y+2	; 0x02
 352:	5b 81       	ldd	r21, Y+3	; 0x03
 354:	9e 01       	movw	r18, r28
 356:	41 15       	cp	r20, r1
 358:	51 05       	cpc	r21, r1
 35a:	f1 f0       	breq	.+60     	; 0x398 <free+0x92>
 35c:	ea 01       	movw	r28, r20
 35e:	f5 cf       	rjmp	.-22     	; 0x34a <free+0x44>
 360:	d3 83       	std	Z+3, r29	; 0x03
 362:	c2 83       	std	Z+2, r28	; 0x02
 364:	40 81       	ld	r20, Z
 366:	51 81       	ldd	r21, Z+1	; 0x01
 368:	84 0f       	add	r24, r20
 36a:	95 1f       	adc	r25, r21
 36c:	c8 17       	cp	r28, r24
 36e:	d9 07       	cpc	r29, r25
 370:	59 f4       	brne	.+22     	; 0x388 <free+0x82>
 372:	88 81       	ld	r24, Y
 374:	99 81       	ldd	r25, Y+1	; 0x01
 376:	84 0f       	add	r24, r20
 378:	95 1f       	adc	r25, r21
 37a:	02 96       	adiw	r24, 0x02	; 2
 37c:	91 83       	std	Z+1, r25	; 0x01
 37e:	80 83       	st	Z, r24
 380:	8a 81       	ldd	r24, Y+2	; 0x02
 382:	9b 81       	ldd	r25, Y+3	; 0x03
 384:	93 83       	std	Z+3, r25	; 0x03
 386:	82 83       	std	Z+2, r24	; 0x02
 388:	21 15       	cp	r18, r1
 38a:	31 05       	cpc	r19, r1
 38c:	29 f4       	brne	.+10     	; 0x398 <free+0x92>
 38e:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <__flp+0x1>
 392:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <__flp>
 396:	3d c0       	rjmp	.+122    	; 0x412 <__DATA_REGION_LENGTH__+0x12>
 398:	e9 01       	movw	r28, r18
 39a:	fb 83       	std	Y+3, r31	; 0x03
 39c:	ea 83       	std	Y+2, r30	; 0x02
 39e:	49 91       	ld	r20, Y+
 3a0:	59 91       	ld	r21, Y+
 3a2:	c4 0f       	add	r28, r20
 3a4:	d5 1f       	adc	r29, r21
 3a6:	ec 17       	cp	r30, r28
 3a8:	fd 07       	cpc	r31, r29
 3aa:	61 f4       	brne	.+24     	; 0x3c4 <free+0xbe>
 3ac:	80 81       	ld	r24, Z
 3ae:	91 81       	ldd	r25, Z+1	; 0x01
 3b0:	84 0f       	add	r24, r20
 3b2:	95 1f       	adc	r25, r21
 3b4:	02 96       	adiw	r24, 0x02	; 2
 3b6:	e9 01       	movw	r28, r18
 3b8:	99 83       	std	Y+1, r25	; 0x01
 3ba:	88 83       	st	Y, r24
 3bc:	82 81       	ldd	r24, Z+2	; 0x02
 3be:	93 81       	ldd	r25, Z+3	; 0x03
 3c0:	9b 83       	std	Y+3, r25	; 0x03
 3c2:	8a 83       	std	Y+2, r24	; 0x02
 3c4:	e0 e0       	ldi	r30, 0x00	; 0
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	12 96       	adiw	r26, 0x02	; 2
 3ca:	8d 91       	ld	r24, X+
 3cc:	9c 91       	ld	r25, X
 3ce:	13 97       	sbiw	r26, 0x03	; 3
 3d0:	00 97       	sbiw	r24, 0x00	; 0
 3d2:	19 f0       	breq	.+6      	; 0x3da <free+0xd4>
 3d4:	fd 01       	movw	r30, r26
 3d6:	dc 01       	movw	r26, r24
 3d8:	f7 cf       	rjmp	.-18     	; 0x3c8 <free+0xc2>
 3da:	8d 91       	ld	r24, X+
 3dc:	9c 91       	ld	r25, X
 3de:	11 97       	sbiw	r26, 0x01	; 1
 3e0:	9d 01       	movw	r18, r26
 3e2:	2e 5f       	subi	r18, 0xFE	; 254
 3e4:	3f 4f       	sbci	r19, 0xFF	; 255
 3e6:	82 0f       	add	r24, r18
 3e8:	93 1f       	adc	r25, r19
 3ea:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 3ee:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 3f2:	28 17       	cp	r18, r24
 3f4:	39 07       	cpc	r19, r25
 3f6:	69 f4       	brne	.+26     	; 0x412 <__DATA_REGION_LENGTH__+0x12>
 3f8:	30 97       	sbiw	r30, 0x00	; 0
 3fa:	29 f4       	brne	.+10     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 3fc:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__flp+0x1>
 400:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__flp>
 404:	02 c0       	rjmp	.+4      	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 406:	13 82       	std	Z+3, r1	; 0x03
 408:	12 82       	std	Z+2, r1	; 0x02
 40a:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__brkval+0x1>
 40e:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__brkval>
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	08 95       	ret

00000418 <memset>:
 418:	dc 01       	movw	r26, r24
 41a:	01 c0       	rjmp	.+2      	; 0x41e <memset+0x6>
 41c:	6d 93       	st	X+, r22
 41e:	41 50       	subi	r20, 0x01	; 1
 420:	50 40       	sbci	r21, 0x00	; 0
 422:	e0 f7       	brcc	.-8      	; 0x41c <memset+0x4>
 424:	08 95       	ret

00000426 <_exit>:
 426:	f8 94       	cli

00000428 <__stop_program>:
 428:	ff cf       	rjmp	.-2      	; 0x428 <__stop_program>
