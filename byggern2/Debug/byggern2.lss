
byggern2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024a  00800100  00000ec6  00000f5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080034a  0080034a  000011a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000183e  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd2  00000000  00000000  00002c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dfd  00000000  00000000  000039e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a0  00000000  00000000  000047e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e9  00000000  00000000  00004c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d24  00000000  00000000  0000536d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	13 e0       	ldi	r17, 0x03	; 3
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 ec       	ldi	r30, 0xC6	; 198
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 34       	cpi	r26, 0x4A	; 74
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	aa e4       	ldi	r26, 0x4A	; 74
  96:	b3 e0       	ldi	r27, 0x03	; 3
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 35       	cpi	r26, 0x54	; 84
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <main>
  a6:	0c 94 61 07 	jmp	0xec2	; 0xec2 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:

#include "can_driver.h"
#include <avr/interrupt.h>

void CAN_init(){
	mcp2515_init();
  ae:	0e 94 fd 00 	call	0x1fa	; 0x1fa <mcp2515_init>
	
	//Set CNF1-> BRP = 3 and SJW = 3
	mcp2515_write(MCP_CNF1, CAN_BRP|SJW4);
  b2:	63 ec       	ldi	r22, 0xC3	; 195
  b4:	8a e2       	ldi	r24, 0x2A	; 42
  b6:	0e 94 29 01 	call	0x252	; 0x252 <mcp2515_write>
	
	//Set CNF2-> BTLMODE: 1 , SAM: 0 , PHSEG: 3 and PRSEG: 1  
	mcp2515_write(MCP_CNF2, BTLMODE | SAMPLE_1X | PHSEG1 | PRSEG);
  ba:	61 eb       	ldi	r22, 0xB1	; 177
  bc:	89 e2       	ldi	r24, 0x29	; 41
  be:	0e 94 29 01 	call	0x252	; 0x252 <mcp2515_write>
	
	//Set CNF3-> SOF: 0, WAKFIL: 0 PHSEG2: 5
	mcp2515_write(MCP_CNF3, SOF_DISABLE | WAKFIL_DISABLE | PHSEG2);
  c2:	65 e0       	ldi	r22, 0x05	; 5
  c4:	88 e2       	ldi	r24, 0x28	; 40
  c6:	0e 94 29 01 	call	0x252	; 0x252 <mcp2515_write>
	
	//Sette Loopback- mode når konfigurert ferdig
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);	//Velger Loopback-mode, se register 10-1 i MCP2515 datasheet
  ca:	40 e4       	ldi	r20, 0x40	; 64
  cc:	60 ee       	ldi	r22, 0xE0	; 224
  ce:	8f e0       	ldi	r24, 0x0F	; 15
  d0:	0e 94 45 01 	call	0x28a	; 0x28a <mcp2515_bit_modify>
  d4:	08 95       	ret

000000d6 <CAN_transmit>:
	//mcp2515_bit_modify(MCP_CANINTE, MCP_TX0IF ,MCP_TX0IF); //skal bare ha en av disse, de gjør nesten det samme, men ikke helt. Første her nå skriver hele registeret til å være lik TX0IF og ikke bare ORer inn
	//MCP_CANINTE |= MCP_TX0IF;	// setter TX0IE-bitet i CANINTE. Bruker flagg-register-bit fordi det er de som er definert i h-filen til mcp, men bitene har samme plass i CANINTE og CANINTF, så det er same same
	//mcp2515_write(MCP_RXB0CTRL, MCP_RXM0 | MCP_RXM1);	//MCP_RXB0CTRL = 0b0110 0000
}

void CAN_transmit(Frame message){
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	2b 97       	sbiw	r28, 0x0b	; 11
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	e9 82       	std	Y+1, r14	; 0x01
  f4:	fa 82       	std	Y+2, r15	; 0x02
  f6:	0b 83       	std	Y+3, r16	; 0x03
  f8:	1c 83       	std	Y+4, r17	; 0x04
  fa:	2d 83       	std	Y+5, r18	; 0x05
  fc:	3e 83       	std	Y+6, r19	; 0x06
  fe:	4f 83       	std	Y+7, r20	; 0x07
 100:	58 87       	std	Y+8, r21	; 0x08
 102:	69 87       	std	Y+9, r22	; 0x09
 104:	7a 87       	std	Y+10, r23	; 0x0a
 106:	8b 87       	std	Y+11, r24	; 0x0b
	mcp2515_write(MCP_TXB0SIDH, message.message_IDH);
 108:	6e 2d       	mov	r22, r14
 10a:	81 e3       	ldi	r24, 0x31	; 49
 10c:	0e 94 29 01 	call	0x252	; 0x252 <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, message.message_IDL);
 110:	6a 81       	ldd	r22, Y+2	; 0x02
 112:	82 e3       	ldi	r24, 0x32	; 50
 114:	0e 94 29 01 	call	0x252	; 0x252 <mcp2515_write>
	
	mcp2515_write(MCP_TXB0DLC, message.data_lenght);
 118:	fb 80       	ldd	r15, Y+3	; 0x03
 11a:	6f 2d       	mov	r22, r15
 11c:	85 e3       	ldi	r24, 0x35	; 53
 11e:	0e 94 29 01 	call	0x252	; 0x252 <mcp2515_write>
	for (int i = 0; i < message.data_lenght; i++){
 122:	00 e0       	ldi	r16, 0x00	; 0
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	0d c0       	rjmp	.+26     	; 0x142 <CAN_transmit+0x6c>
		mcp2515_write(MCP_TXB0D0 + i, message.data[i]);
 128:	e4 e0       	ldi	r30, 0x04	; 4
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	ec 0f       	add	r30, r28
 12e:	fd 1f       	adc	r31, r29
 130:	e0 0f       	add	r30, r16
 132:	f1 1f       	adc	r31, r17
 134:	60 81       	ld	r22, Z
 136:	86 e3       	ldi	r24, 0x36	; 54
 138:	80 0f       	add	r24, r16
 13a:	0e 94 29 01 	call	0x252	; 0x252 <mcp2515_write>
void CAN_transmit(Frame message){
	mcp2515_write(MCP_TXB0SIDH, message.message_IDH);
	mcp2515_write(MCP_TXB0SIDL, message.message_IDL);
	
	mcp2515_write(MCP_TXB0DLC, message.data_lenght);
	for (int i = 0; i < message.data_lenght; i++){
 13e:	0f 5f       	subi	r16, 0xFF	; 255
 140:	1f 4f       	sbci	r17, 0xFF	; 255
 142:	8f 2d       	mov	r24, r15
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	08 17       	cp	r16, r24
 148:	19 07       	cpc	r17, r25
 14a:	74 f3       	brlt	.-36     	; 0x128 <CAN_transmit+0x52>
		mcp2515_write(MCP_TXB0D0 + i, message.data[i]);
	}
	
	mcp2515_request_to_send();
 14c:	0e 94 3d 01 	call	0x27a	; 0x27a <mcp2515_request_to_send>
}
 150:	2b 96       	adiw	r28, 0x0b	; 11
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	f8 94       	cli
 156:	de bf       	out	0x3e, r29	; 62
 158:	0f be       	out	0x3f, r0	; 63
 15a:	cd bf       	out	0x3d, r28	; 61
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	ff 90       	pop	r15
 166:	ef 90       	pop	r14
 168:	08 95       	ret

0000016a <CAN_recieve>:

Frame CAN_recieve(){
 16a:	ff 92       	push	r15
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	8c 01       	movw	r16, r24
	Frame message;
	 
	// Tips for feilsøking:	mcp2515_read_status();
	message.message_IDH = mcp2515_read(MCP_RXB0SIDH);
 176:	81 e6       	ldi	r24, 0x61	; 97
 178:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <mcp2515_read>
 17c:	f8 01       	movw	r30, r16
 17e:	80 83       	st	Z, r24
	message.message_IDL = mcp2515_read(MCP_RXB0SIDL);
 180:	82 e6       	ldi	r24, 0x62	; 98
 182:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <mcp2515_read>
 186:	f8 01       	movw	r30, r16
 188:	81 83       	std	Z+1, r24	; 0x01
	message.data_lenght = mcp2515_read(MCP_RXB0DLC);
 18a:	85 e6       	ldi	r24, 0x65	; 101
 18c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <mcp2515_read>
 190:	f8 2e       	mov	r15, r24
 192:	f8 01       	movw	r30, r16
 194:	82 83       	std	Z+2, r24	; 0x02
	
	for (int i = 0; i < message.data_lenght; i++){
 196:	c0 e0       	ldi	r28, 0x00	; 0
 198:	d0 e0       	ldi	r29, 0x00	; 0
 19a:	09 c0       	rjmp	.+18     	; 0x1ae <CAN_recieve+0x44>
		message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
 19c:	8c 2f       	mov	r24, r28
 19e:	8a 59       	subi	r24, 0x9A	; 154
 1a0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <mcp2515_read>
 1a4:	f8 01       	movw	r30, r16
 1a6:	ec 0f       	add	r30, r28
 1a8:	fd 1f       	adc	r31, r29
 1aa:	83 83       	std	Z+3, r24	; 0x03
	// Tips for feilsøking:	mcp2515_read_status();
	message.message_IDH = mcp2515_read(MCP_RXB0SIDH);
	message.message_IDL = mcp2515_read(MCP_RXB0SIDL);
	message.data_lenght = mcp2515_read(MCP_RXB0DLC);
	
	for (int i = 0; i < message.data_lenght; i++){
 1ac:	21 96       	adiw	r28, 0x01	; 1
 1ae:	8f 2d       	mov	r24, r15
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	c8 17       	cp	r28, r24
 1b4:	d9 07       	cpc	r29, r25
 1b6:	94 f3       	brlt	.-28     	; 0x19c <CAN_recieve+0x32>
		message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
	}
	
	return message;
}
 1b8:	c8 01       	movw	r24, r16
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	ff 90       	pop	r15
 1c4:	08 95       	ret

000001c6 <mcp2515_reset>:
#include "mcp2515_driver.h"

void mcp2515_reset(){
	// setter CS lav, deretter sender vi instruksjonen MCP_RESET som resetter interne registre og setter config-modus. Setter så CS høy
	//CS = SS, siden vi kun har en slave
	set_SS_low();
 1c6:	0e 94 9b 01 	call	0x336	; 0x336 <set_SS_low>
	SPI_send(MCP_RESET);
 1ca:	80 ec       	ldi	r24, 0xC0	; 192
 1cc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SPI_send>
	set_SS_high();
 1d0:	0e 94 9f 01 	call	0x33e	; 0x33e <set_SS_high>
 1d4:	08 95       	ret

000001d6 <mcp2515_read>:
	
	return 0;
}


uint8_t mcp2515_read(uint8_t address){
 1d6:	cf 93       	push	r28
 1d8:	c8 2f       	mov	r28, r24
	uint8_t result;
	
	set_SS_low();
 1da:	0e 94 9b 01 	call	0x336	; 0x336 <set_SS_low>
	//PORTB &= ~(1 << PB4); // Select CAN - controller -> bruke funksjonen vår slaveselect low
	
	SPI_send(MCP_READ); // Send read instruction
 1de:	83 e0       	ldi	r24, 0x03	; 3
 1e0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SPI_send>
	SPI_send(address); // Send address
 1e4:	8c 2f       	mov	r24, r28
 1e6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SPI_send>
	result = SPI_read(); // Read result
 1ea:	0e 94 1e 02 	call	0x43c	; 0x43c <SPI_read>
 1ee:	c8 2f       	mov	r28, r24
	
	//PORTB |= (1 << CAN_CS); // Deselect CAN - controller
	set_SS_high();
 1f0:	0e 94 9f 01 	call	0x33e	; 0x33e <set_SS_high>
	return result;
}
 1f4:	8c 2f       	mov	r24, r28
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <mcp2515_init>:
	set_SS_low();
	SPI_send(MCP_RESET);
	set_SS_high();
}

uint8_t mcp2515_init(){
 1fa:	cf 93       	push	r28
	uint8_t value;
	SPI_init(); // Initialize SPI
 1fc:	0e 94 a3 01 	call	0x346	; 0x346 <SPI_init>
	mcp2515_reset(); // Send reset - command
 200:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <mcp2515_reset>
	//De to neste linjene er forsøk på å endre mode 
	//mcp2515_write(MCP_CANCTRL, MODE_CONFIG );
	//mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LISTENONLY);
	
	// Self - test
	value = mcp2515_read(MCP_CANSTAT);
 204:	8e e0       	ldi	r24, 0x0E	; 14
 206:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <mcp2515_read>
 20a:	c8 2f       	mov	r28, r24
	uint8_t can_ctrl = mcp2515_read(MCP_CANCTRL);
 20c:	8f e0       	ldi	r24, 0x0F	; 15
 20e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <mcp2515_read>
	printf("\nvalue: %d can_ctrl: %d \n\r" , value, can_ctrl);
 212:	1f 92       	push	r1
 214:	8f 93       	push	r24
 216:	1f 92       	push	r1
 218:	cf 93       	push	r28
 21a:	82 e1       	ldi	r24, 0x12	; 18
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	9f 93       	push	r25
 220:	8f 93       	push	r24
 222:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
	if ((value & MODE_MASK) != MODE_CONFIG){
 226:	c0 7e       	andi	r28, 0xE0	; 224
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	c0 38       	cpi	r28, 0x80	; 128
 236:	51 f0       	breq	.+20     	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
		printf ("MCP2515 is NOT in configuration mode after reset !\n\r");
 238:	8d e2       	ldi	r24, 0x2D	; 45
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	9f 93       	push	r25
 23e:	8f 93       	push	r24
 240:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
		return 1;
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	01 c0       	rjmp	.+2      	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
	}
	// More initialization
	//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	return 0;
 24c:	80 e0       	ldi	r24, 0x00	; 0
}
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <mcp2515_write>:
	//PORTB |= (1 << CAN_CS); // Deselect CAN - controller
	set_SS_high();
	return result;
}

void mcp2515_write(uint8_t address, uint8_t data){
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	d8 2f       	mov	r29, r24
 258:	c6 2f       	mov	r28, r22
	set_SS_low();
 25a:	0e 94 9b 01 	call	0x336	; 0x336 <set_SS_low>
	SPI_send(MCP_WRITE);
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SPI_send>
	SPI_send(address);
 264:	8d 2f       	mov	r24, r29
 266:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SPI_send>
	SPI_send(data);
 26a:	8c 2f       	mov	r24, r28
 26c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SPI_send>
	set_SS_high();
 270:	0e 94 9f 01 	call	0x33e	; 0x33e <set_SS_high>
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <mcp2515_request_to_send>:

void mcp2515_request_to_send(){
	set_SS_low();
 27a:	0e 94 9b 01 	call	0x336	; 0x336 <set_SS_low>
	SPI_send(MCP_RTS_TX0);	// setter MCP_TXB0CTRL.TXREQ-bitet for bufferet vårt (TX0)
 27e:	81 e8       	ldi	r24, 0x81	; 129
 280:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SPI_send>
	set_SS_high();
 284:	0e 94 9f 01 	call	0x33e	; 0x33e <set_SS_high>
 288:	08 95       	ret

0000028a <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
 28a:	ff 92       	push	r15
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	2c 97       	sbiw	r28, 0x0c	; 12
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	18 2f       	mov	r17, r24
 2a6:	f6 2e       	mov	r15, r22
 2a8:	04 2f       	mov	r16, r20
	set_SS_low();
 2aa:	0e 94 9b 01 	call	0x336	; 0x336 <set_SS_low>
	uint8_t register_list[12] = {MCP_TXB0CTRL, MCP_TXB1CTRL, MCP_TXB2CTRL, MCP_RXB0CTRL, MCP_RXB1CTRL, MCP_CNF3, MCP_CNF2, MCP_CNF1, MCP_CANINTE, MCP_CANINTF, MCP_EFLG, MCP_CANCTRL};	//MCP_BFPCTRL, MCP_TXRTSCTRL er i listen i databladet, men ikke i filen med registre vi fikk fra BlackBoard
 2ae:	8c e0       	ldi	r24, 0x0C	; 12
 2b0:	e6 e0       	ldi	r30, 0x06	; 6
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 2b4:	de 01       	movw	r26, r28
 2b6:	11 96       	adiw	r26, 0x01	; 1
 2b8:	01 90       	ld	r0, Z+
 2ba:	0d 92       	st	X+, r0
 2bc:	8a 95       	dec	r24
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <mcp2515_bit_modify+0x2e>
	
	uint8_t address_in_list = 0;
	
	for(int i = 0; i < 12; i++){
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	1a c0       	rjmp	.+52     	; 0x2fa <mcp2515_bit_modify+0x70>
		if(register_list[i] == address){
 2c6:	e1 e0       	ldi	r30, 0x01	; 1
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	ec 0f       	add	r30, r28
 2cc:	fd 1f       	adc	r31, r29
 2ce:	e8 0f       	add	r30, r24
 2d0:	f9 1f       	adc	r31, r25
 2d2:	20 81       	ld	r18, Z
 2d4:	21 13       	cpse	r18, r17
 2d6:	10 c0       	rjmp	.+32     	; 0x2f8 <mcp2515_bit_modify+0x6e>
			SPI_send(MCP_BITMOD);
 2d8:	85 e0       	ldi	r24, 0x05	; 5
 2da:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SPI_send>
			//må sjekke om address som vi tok inn som input faktisk er i listen over registre som er lov å manipulere manuelt bit for bit
			SPI_send(address);
 2de:	81 2f       	mov	r24, r17
 2e0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SPI_send>
			SPI_send(mask);
 2e4:	8f 2d       	mov	r24, r15
 2e6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SPI_send>
			SPI_send(data);
 2ea:	80 2f       	mov	r24, r16
 2ec:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SPI_send>
			set_SS_high();
 2f0:	0e 94 9f 01 	call	0x33e	; 0x33e <set_SS_high>
			address_in_list = 1;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
			break;
 2f6:	05 c0       	rjmp	.+10     	; 0x302 <mcp2515_bit_modify+0x78>
	set_SS_low();
	uint8_t register_list[12] = {MCP_TXB0CTRL, MCP_TXB1CTRL, MCP_TXB2CTRL, MCP_RXB0CTRL, MCP_RXB1CTRL, MCP_CNF3, MCP_CNF2, MCP_CNF1, MCP_CANINTE, MCP_CANINTF, MCP_EFLG, MCP_CANCTRL};	//MCP_BFPCTRL, MCP_TXRTSCTRL er i listen i databladet, men ikke i filen med registre vi fikk fra BlackBoard
	
	uint8_t address_in_list = 0;
	
	for(int i = 0; i < 12; i++){
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	8c 30       	cpi	r24, 0x0C	; 12
 2fc:	91 05       	cpc	r25, r1
 2fe:	1c f3       	brlt	.-58     	; 0x2c6 <mcp2515_bit_modify+0x3c>

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
	set_SS_low();
	uint8_t register_list[12] = {MCP_TXB0CTRL, MCP_TXB1CTRL, MCP_TXB2CTRL, MCP_RXB0CTRL, MCP_RXB1CTRL, MCP_CNF3, MCP_CNF2, MCP_CNF1, MCP_CANINTE, MCP_CANINTF, MCP_EFLG, MCP_CANCTRL};	//MCP_BFPCTRL, MCP_TXRTSCTRL er i listen i databladet, men ikke i filen med registre vi fikk fra BlackBoard
	
	uint8_t address_in_list = 0;
 300:	80 e0       	ldi	r24, 0x00	; 0
			address_in_list = 1;
			break;
		}
	}
	
	if (address_in_list == 0){
 302:	81 11       	cpse	r24, r1
 304:	0c c0       	rjmp	.+24     	; 0x31e <mcp2515_bit_modify+0x94>
		printf("You can not bit-modify register %d \n", address);
 306:	1f 92       	push	r1
 308:	1f 93       	push	r17
 30a:	82 e6       	ldi	r24, 0x62	; 98
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	9f 93       	push	r25
 310:	8f 93       	push	r24
 312:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
	}
}
 31e:	2c 96       	adiw	r28, 0x0c	; 12
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	1f 91       	pop	r17
 330:	0f 91       	pop	r16
 332:	ff 90       	pop	r15
 334:	08 95       	ret

00000336 <set_SS_low>:
}


void set_SS_low(){
	//Setter SS til 0
	PORTB &= ~(1<<PB4);
 336:	88 b3       	in	r24, 0x18	; 24
 338:	8f 7e       	andi	r24, 0xEF	; 239
 33a:	88 bb       	out	0x18, r24	; 24
 33c:	08 95       	ret

0000033e <set_SS_high>:
}

void set_SS_high(){
	//Setter SS til 1
	PORTB |= (1<<PB4);
 33e:	88 b3       	in	r24, 0x18	; 24
 340:	80 61       	ori	r24, 0x10	; 16
 342:	88 bb       	out	0x18, r24	; 24
 344:	08 95       	ret

00000346 <SPI_init>:



void SPI_init(){
	
	DDRB = 0x00;
 346:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
 348:	18 ba       	out	0x18, r1	; 24
	SPCR = 0x00;
 34a:	1d b8       	out	0x0d, r1	; 13
	
	// input = 0, output = 1
	
	//Setter MOSI, SCK og SS til output
	DDRB |= (1<<PB4)|(1<<PB5)|(1<<PB7);
 34c:	87 b3       	in	r24, 0x17	; 23
 34e:	80 6b       	ori	r24, 0xB0	; 176
 350:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PB6);
 352:	87 b3       	in	r24, 0x17	; 23
 354:	8f 7b       	andi	r24, 0xBF	; 191
 356:	87 bb       	out	0x17, r24	; 23
	//Enable SPI, Master, setter klokke til fck/16
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
 358:	81 e5       	ldi	r24, 0x51	; 81
 35a:	8d b9       	out	0x0d, r24	; 13
	//Setter modus til SPI
	// kommenterte ut 14:47 onsdag 12.10
	SPCR &= ~(1<<CPOL);
 35c:	8d b1       	in	r24, 0x0d	; 13
 35e:	87 7f       	andi	r24, 0xF7	; 247
 360:	8d b9       	out	0x0d, r24	; 13
	SPCR &= ~(1<<CPHA);
 362:	8d b1       	in	r24, 0x0d	; 13
 364:	8b 7f       	andi	r24, 0xFB	; 251
 366:	8d b9       	out	0x0d, r24	; 13
	//Setter SS til 1
	//PORTB |= (1<<PB4);
	set_SS_high();
 368:	0e 94 9f 01 	call	0x33e	; 0x33e <set_SS_high>
	printf("DDRB: %d, SPCR: %d, PORTB: %d, SPDR: %d \r\n", DDRB, SPCR, PORTB, SPDR);
 36c:	3f b1       	in	r19, 0x0f	; 15
 36e:	28 b3       	in	r18, 0x18	; 24
 370:	9d b1       	in	r25, 0x0d	; 13
 372:	87 b3       	in	r24, 0x17	; 23
 374:	1f 92       	push	r1
 376:	3f 93       	push	r19
 378:	1f 92       	push	r1
 37a:	2f 93       	push	r18
 37c:	1f 92       	push	r1
 37e:	9f 93       	push	r25
 380:	1f 92       	push	r1
 382:	8f 93       	push	r24
 384:	87 e8       	ldi	r24, 0x87	; 135
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	9f 93       	push	r25
 38a:	8f 93       	push	r24
 38c:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
}
 390:	8d b7       	in	r24, 0x3d	; 61
 392:	9e b7       	in	r25, 0x3e	; 62
 394:	0a 96       	adiw	r24, 0x0a	; 10
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	f8 94       	cli
 39a:	9e bf       	out	0x3e, r25	; 62
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	8d bf       	out	0x3d, r24	; 61
 3a0:	08 95       	ret

000003a2 <SPI_send>:
void set_SS_high(){
	//Setter SS til 1
	PORTB |= (1<<PB4);
}

void SPI_send(uint8_t data){
 3a2:	cf 93       	push	r28
 3a4:	c8 2f       	mov	r28, r24
	//setter SS lav
	//set_SS_low();
	//Start transmission
	printf("\n\nSPDR forrige: %d\n\r", SPDR);
 3a6:	8f b1       	in	r24, 0x0f	; 15
 3a8:	1f 92       	push	r1
 3aa:	8f 93       	push	r24
 3ac:	82 eb       	ldi	r24, 0xB2	; 178
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	9f 93       	push	r25
 3b2:	8f 93       	push	r24
 3b4:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
	SPDR = data;
 3b8:	cf b9       	out	0x0f, r28	; 15
	//_delay_ms(500);
	printf("data: %d\n\r", data);
 3ba:	1f 92       	push	r1
 3bc:	cf 93       	push	r28
 3be:	87 ec       	ldi	r24, 0xC7	; 199
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	9f 93       	push	r25
 3c4:	8f 93       	push	r24
 3c6:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
	printf("SPDR: %d\n\r", SPDR);
 3ca:	8f b1       	in	r24, 0x0f	; 15
 3cc:	1f 92       	push	r1
 3ce:	8f 93       	push	r24
 3d0:	82 ed       	ldi	r24, 0xD2	; 210
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	9f 93       	push	r25
 3d6:	8f 93       	push	r24
 3d8:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3dc:	2f e3       	ldi	r18, 0x3F	; 63
 3de:	8d e0       	ldi	r24, 0x0D	; 13
 3e0:	93 e0       	ldi	r25, 0x03	; 3
 3e2:	21 50       	subi	r18, 0x01	; 1
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	90 40       	sbci	r25, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <SPI_send+0x40>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <SPI_send+0x4a>
 3ec:	00 00       	nop
 3ee:	8d b7       	in	r24, 0x3d	; 61
 3f0:	9e b7       	in	r25, 0x3e	; 62
 3f2:	0c 96       	adiw	r24, 0x0c	; 12
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	9e bf       	out	0x3e, r25	; 62
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	8d bf       	out	0x3d, r24	; 61
 3fe:	0d c0       	rjmp	.+26     	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
	
	_delay_ms(1000);
	
	//venter på at transmision skal fullføres 
	while (!(SPSR & (1<<SPIF))){
		printf("SPSR waiting: %d\n\r", SPSR);
 400:	8e b1       	in	r24, 0x0e	; 14
 402:	1f 92       	push	r1
 404:	8f 93       	push	r24
 406:	8d ed       	ldi	r24, 0xDD	; 221
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	9f 93       	push	r25
 40c:	8f 93       	push	r24
 40e:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
	printf("SPDR: %d\n\r", SPDR);
	
	_delay_ms(1000);
	
	//venter på at transmision skal fullføres 
	while (!(SPSR & (1<<SPIF))){
 41a:	77 9b       	sbis	0x0e, 7	; 14
 41c:	f1 cf       	rjmp	.-30     	; 0x400 <__DATA_REGION_LENGTH__>
		printf("SPSR waiting: %d\n\r", SPSR);
		;
	}
	printf("SPSR done: %d\n\r", SPSR);
 41e:	8e b1       	in	r24, 0x0e	; 14
 420:	1f 92       	push	r1
 422:	8f 93       	push	r24
 424:	80 ef       	ldi	r24, 0xF0	; 240
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	9f 93       	push	r25
 42a:	8f 93       	push	r24
 42c:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
	
	MCP_RXF4EID0 brukes i SPI_send mellom mcp_read(CANSTAT) og mcp_read(CANCTRL) i mcp_init() og etter mcp_read(CANCTRL) igjen -> er det dummyen??
	- glem det, var dummy 
	SPDR er 0!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! wtf??
	*/
}
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <SPI_read>:

uint8_t SPI_read(){
	//Legger en dummy byte på SPDR registeret og sender dette til CAN, får da tilbake det som lå på registere til CAN. 
	uint8_t dummy = 0x11;
	SPI_send(dummy);
 43c:	81 e1       	ldi	r24, 0x11	; 17
 43e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SPI_send>
	return SPDR;
 442:	8f b1       	in	r24, 0x0f	; 15
}
 444:	08 95       	ret

00000446 <xmem_init>:
 446:	85 b7       	in	r24, 0x35	; 53
 448:	80 68       	ori	r24, 0x80	; 128
 44a:	85 bf       	out	0x35, r24	; 53
 44c:	80 b7       	in	r24, 0x30	; 48
 44e:	80 62       	ori	r24, 0x20	; 32
 450:	80 bf       	out	0x30, r24	; 48
 452:	08 95       	ret

00000454 <can_test>:
		_delay_ms(1000);
	}
}


void can_test(){
 454:	ef 92       	push	r14
 456:	ff 92       	push	r15
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
 464:	66 97       	sbiw	r28, 0x16	; 22
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	cd bf       	out	0x3d, r28	; 61
	Frame message;
	message.message_IDH = 0b10101010;
 470:	8a ea       	ldi	r24, 0xAA	; 170
 472:	89 83       	std	Y+1, r24	; 0x01
	message.message_IDL = 0b00010000;
 474:	80 e1       	ldi	r24, 0x10	; 16
 476:	8a 83       	std	Y+2, r24	; 0x02
	message.data_lenght = 1; 
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	8b 83       	std	Y+3, r24	; 0x03
	message.data[0] = 0b11001100;
 47c:	8c ec       	ldi	r24, 0xCC	; 204
 47e:	8c 83       	std	Y+4, r24	; 0x04
	
	CAN_init();
 480:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
	
	CAN_transmit(message);
 484:	e9 80       	ldd	r14, Y+1	; 0x01
 486:	fa 80       	ldd	r15, Y+2	; 0x02
 488:	0b 81       	ldd	r16, Y+3	; 0x03
 48a:	1c 81       	ldd	r17, Y+4	; 0x04
 48c:	2d 81       	ldd	r18, Y+5	; 0x05
 48e:	3e 81       	ldd	r19, Y+6	; 0x06
 490:	4f 81       	ldd	r20, Y+7	; 0x07
 492:	58 85       	ldd	r21, Y+8	; 0x08
 494:	69 85       	ldd	r22, Y+9	; 0x09
 496:	7a 85       	ldd	r23, Y+10	; 0x0a
 498:	8b 85       	ldd	r24, Y+11	; 0x0b
 49a:	0e 94 6b 00 	call	0xd6	; 0xd6 <CAN_transmit>
	Frame recieved_message = CAN_recieve();
 49e:	ce 01       	movw	r24, r28
 4a0:	0c 96       	adiw	r24, 0x0c	; 12
 4a2:	0e 94 b5 00 	call	0x16a	; 0x16a <CAN_recieve>
	printf("Recieved_message: %d \n -------------------------- \n\r",recieved_message.data[0]);
 4a6:	8f 85       	ldd	r24, Y+15	; 0x0f
 4a8:	1f 92       	push	r1
 4aa:	8f 93       	push	r24
 4ac:	85 ee       	ldi	r24, 0xE5	; 229
 4ae:	92 e0       	ldi	r25, 0x02	; 2
 4b0:	9f 93       	push	r25
 4b2:	8f 93       	push	r24
 4b4:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
	
}
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	66 96       	adiw	r28, 0x16	; 22
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	f8 94       	cli
 4c6:	de bf       	out	0x3e, r29	; 62
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	cd bf       	out	0x3d, r28	; 61
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	1f 91       	pop	r17
 4d2:	0f 91       	pop	r16
 4d4:	ff 90       	pop	r15
 4d6:	ef 90       	pop	r14
 4d8:	08 95       	ret

000004da <SPDR_test>:

void SPDR_test(){
 4da:	0f 93       	push	r16
 4dc:	1f 93       	push	r17
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
	SPI_init();
 4e2:	0e 94 a3 01 	call	0x346	; 0x346 <SPI_init>

	char newData = 'b';
	SPDR = newData;
 4e6:	82 e6       	ldi	r24, 0x62	; 98
 4e8:	8f b9       	out	0x0f, r24	; 15
	printf("newData: %d \n\r", newData);
 4ea:	1f 92       	push	r1
 4ec:	8f 93       	push	r24
 4ee:	0a e1       	ldi	r16, 0x1A	; 26
 4f0:	13 e0       	ldi	r17, 0x03	; 3
 4f2:	1f 93       	push	r17
 4f4:	0f 93       	push	r16
 4f6:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
	printf("SPDR: %d \n\r", SPDR);
 4fa:	8f b1       	in	r24, 0x0f	; 15
 4fc:	1f 92       	push	r1
 4fe:	8f 93       	push	r24
 500:	c9 e2       	ldi	r28, 0x29	; 41
 502:	d3 e0       	ldi	r29, 0x03	; 3
 504:	df 93       	push	r29
 506:	cf 93       	push	r28
 508:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
	
	newData = 'q';
	SPDR = newData;
 50c:	81 e7       	ldi	r24, 0x71	; 113
 50e:	8f b9       	out	0x0f, r24	; 15
	printf("newData: %d \n\r", newData);
 510:	1f 92       	push	r1
 512:	8f 93       	push	r24
 514:	1f 93       	push	r17
 516:	0f 93       	push	r16
 518:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
	printf("SPDR: %d \n\r", SPDR);
 51c:	8f b1       	in	r24, 0x0f	; 15
 51e:	1f 92       	push	r1
 520:	8f 93       	push	r24
 522:	df 93       	push	r29
 524:	cf 93       	push	r28
 526:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
	
	newData = 'a';
	SPDR = newData;
 52a:	81 e6       	ldi	r24, 0x61	; 97
 52c:	8f b9       	out	0x0f, r24	; 15
	printf("newData: %d \n\r", newData);
 52e:	1f 92       	push	r1
 530:	8f 93       	push	r24
 532:	1f 93       	push	r17
 534:	0f 93       	push	r16
 536:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
	printf("SPDR: %d \n\r", SPDR);
 53a:	8f b1       	in	r24, 0x0f	; 15
 53c:	1f 92       	push	r1
 53e:	8f 93       	push	r24
 540:	df 93       	push	r29
 542:	cf 93       	push	r28
 544:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
	
	
	newData = 'l';
	SPDR = newData;
 548:	8c e6       	ldi	r24, 0x6C	; 108
 54a:	8f b9       	out	0x0f, r24	; 15
	printf("newData: %d \n\r", newData);
 54c:	1f 92       	push	r1
 54e:	8f 93       	push	r24
 550:	1f 93       	push	r17
 552:	0f 93       	push	r16
 554:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
	printf("SPDR: %d \n\r", SPDR);
 558:	8f b1       	in	r24, 0x0f	; 15
 55a:	1f 92       	push	r1
 55c:	8f 93       	push	r24
 55e:	df 93       	push	r29
 560:	cf 93       	push	r28
 562:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
}
 566:	8d b7       	in	r24, 0x3d	; 61
 568:	9e b7       	in	r25, 0x3e	; 62
 56a:	80 96       	adiw	r24, 0x20	; 32
 56c:	0f b6       	in	r0, 0x3f	; 63
 56e:	f8 94       	cli
 570:	9e bf       	out	0x3e, r25	; 62
 572:	0f be       	out	0x3f, r0	; 63
 574:	8d bf       	out	0x3d, r24	; 61
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	08 95       	ret

00000580 <uart_write>:

void uart_write(unsigned char letter){
	/*1. Sjekke om det er klart til å sende ny data
	2. sende ny data*/
	 
	while(!(UCSR0A & (1<<UDRE0))){
 580:	5d 9b       	sbis	0x0b, 5	; 11
 582:	fe cf       	rjmp	.-4      	; 0x580 <uart_write>
		
	}
	UDR0 = letter;
 584:	8c b9       	out	0x0c, r24	; 12
 586:	08 95       	ret

00000588 <uart_read>:
}

unsigned char uart_read(){
	while (!(UCSR0A & (1 << RXC0))){
 588:	5f 9b       	sbis	0x0b, 7	; 11
 58a:	fe cf       	rjmp	.-4      	; 0x588 <uart_read>
		
	}
	return UDR0;
 58c:	8c b1       	in	r24, 0x0c	; 12
}
 58e:	08 95       	ret

00000590 <uart_init>:

#include "uart.h"

void uart_init(unsigned int ubrr){
	//Set baud rate, divided into two registers
	UBRR0H = (unsigned char)(ubrr>>8); //high register, alt får egt plass på 8 bit så derfor blir det 0
 590:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr; //low register
 592:	89 b9       	out	0x09, r24	; 9
				
	/* Enable receiver and transmitter 
	hvor mange bit data: man kan ha 5-9 bit, vi vil ha 8
	hvor mange stop-bit: 2 stk, pga ignorerer det første bitet*/
			
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 594:	88 e1       	ldi	r24, 0x18	; 24
 596:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << URSEL0)|(1<< USBS0)|(3 << UCSZ00);
 598:	8e e8       	ldi	r24, 0x8E	; 142
 59a:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uart_write, uart_read);
 59c:	64 ec       	ldi	r22, 0xC4	; 196
 59e:	72 e0       	ldi	r23, 0x02	; 2
 5a0:	80 ec       	ldi	r24, 0xC0	; 192
 5a2:	92 e0       	ldi	r25, 0x02	; 2
 5a4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <fdevopen>
 5a8:	08 95       	ret

000005aa <main>:
#include "test.h"
#include "xmem.h"
#include "Multifunc_board/multifunction.h"
#include "CAN_controller/spi_driver.h"

int main(void){
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
	uart_init(MYUBRR);
 5ae:	8f e1       	ldi	r24, 0x1F	; 31
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 c8 02 	call	0x590	; 0x590 <uart_init>
	printf("\r\n\n\n\nStart test: \n\r");
 5b6:	c5 e3       	ldi	r28, 0x35	; 53
 5b8:	d3 e0       	ldi	r29, 0x03	; 3
 5ba:	df 93       	push	r29
 5bc:	cf 93       	push	r28
 5be:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
	xmem_init(); 
 5c2:	0e 94 23 02 	call	0x446	; 0x446 <xmem_init>
	
	//multifunction_init();
	printf("\r\n\n\n\nStart test: \n\r");		// \r gjør at man i putty begynner på neste linje (tabber ut linjen)
 5c6:	df 93       	push	r29
 5c8:	cf 93       	push	r28
 5ca:	0e 94 3f 03 	call	0x67e	; 0x67e <printf>
	
	
	
	can_test();
 5ce:	0e 94 2a 02 	call	0x454	; 0x454 <can_test>
	
	SPDR_test();
 5d2:	0e 94 6d 02 	call	0x4da	; 0x4da <SPDR_test>
 5d6:	0f 90       	pop	r0
 5d8:	0f 90       	pop	r0
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
}
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <fdevopen>:
 5e8:	0f 93       	push	r16
 5ea:	1f 93       	push	r17
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	00 97       	sbiw	r24, 0x00	; 0
 5f2:	31 f4       	brne	.+12     	; 0x600 <fdevopen+0x18>
 5f4:	61 15       	cp	r22, r1
 5f6:	71 05       	cpc	r23, r1
 5f8:	19 f4       	brne	.+6      	; 0x600 <fdevopen+0x18>
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	3a c0       	rjmp	.+116    	; 0x674 <fdevopen+0x8c>
 600:	8b 01       	movw	r16, r22
 602:	ec 01       	movw	r28, r24
 604:	6e e0       	ldi	r22, 0x0E	; 14
 606:	70 e0       	ldi	r23, 0x00	; 0
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 36 05 	call	0xa6c	; 0xa6c <calloc>
 610:	fc 01       	movw	r30, r24
 612:	89 2b       	or	r24, r25
 614:	91 f3       	breq	.-28     	; 0x5fa <fdevopen+0x12>
 616:	80 e8       	ldi	r24, 0x80	; 128
 618:	83 83       	std	Z+3, r24	; 0x03
 61a:	01 15       	cp	r16, r1
 61c:	11 05       	cpc	r17, r1
 61e:	71 f0       	breq	.+28     	; 0x63c <fdevopen+0x54>
 620:	13 87       	std	Z+11, r17	; 0x0b
 622:	02 87       	std	Z+10, r16	; 0x0a
 624:	81 e8       	ldi	r24, 0x81	; 129
 626:	83 83       	std	Z+3, r24	; 0x03
 628:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <__data_end>
 62c:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <__data_end+0x1>
 630:	89 2b       	or	r24, r25
 632:	21 f4       	brne	.+8      	; 0x63c <fdevopen+0x54>
 634:	f0 93 4b 03 	sts	0x034B, r31	; 0x80034b <__data_end+0x1>
 638:	e0 93 4a 03 	sts	0x034A, r30	; 0x80034a <__data_end>
 63c:	20 97       	sbiw	r28, 0x00	; 0
 63e:	c9 f0       	breq	.+50     	; 0x672 <fdevopen+0x8a>
 640:	d1 87       	std	Z+9, r29	; 0x09
 642:	c0 87       	std	Z+8, r28	; 0x08
 644:	83 81       	ldd	r24, Z+3	; 0x03
 646:	82 60       	ori	r24, 0x02	; 2
 648:	83 83       	std	Z+3, r24	; 0x03
 64a:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <__data_end+0x2>
 64e:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <__data_end+0x3>
 652:	89 2b       	or	r24, r25
 654:	71 f4       	brne	.+28     	; 0x672 <fdevopen+0x8a>
 656:	f0 93 4d 03 	sts	0x034D, r31	; 0x80034d <__data_end+0x3>
 65a:	e0 93 4c 03 	sts	0x034C, r30	; 0x80034c <__data_end+0x2>
 65e:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <__data_end+0x4>
 662:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <__data_end+0x5>
 666:	89 2b       	or	r24, r25
 668:	21 f4       	brne	.+8      	; 0x672 <fdevopen+0x8a>
 66a:	f0 93 4f 03 	sts	0x034F, r31	; 0x80034f <__data_end+0x5>
 66e:	e0 93 4e 03 	sts	0x034E, r30	; 0x80034e <__data_end+0x4>
 672:	cf 01       	movw	r24, r30
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	0f 91       	pop	r16
 67c:	08 95       	ret

0000067e <printf>:
 67e:	a0 e0       	ldi	r26, 0x00	; 0
 680:	b0 e0       	ldi	r27, 0x00	; 0
 682:	e5 e4       	ldi	r30, 0x45	; 69
 684:	f3 e0       	ldi	r31, 0x03	; 3
 686:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__prologue_saves__+0x20>
 68a:	ae 01       	movw	r20, r28
 68c:	4b 5f       	subi	r20, 0xFB	; 251
 68e:	5f 4f       	sbci	r21, 0xFF	; 255
 690:	fa 01       	movw	r30, r20
 692:	61 91       	ld	r22, Z+
 694:	71 91       	ld	r23, Z+
 696:	af 01       	movw	r20, r30
 698:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <__data_end+0x2>
 69c:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <__data_end+0x3>
 6a0:	0e 94 55 03 	call	0x6aa	; 0x6aa <vfprintf>
 6a4:	e2 e0       	ldi	r30, 0x02	; 2
 6a6:	0c 94 56 07 	jmp	0xeac	; 0xeac <__epilogue_restores__+0x20>

000006aa <vfprintf>:
 6aa:	ab e0       	ldi	r26, 0x0B	; 11
 6ac:	b0 e0       	ldi	r27, 0x00	; 0
 6ae:	eb e5       	ldi	r30, 0x5B	; 91
 6b0:	f3 e0       	ldi	r31, 0x03	; 3
 6b2:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__prologue_saves__>
 6b6:	6c 01       	movw	r12, r24
 6b8:	7b 01       	movw	r14, r22
 6ba:	8a 01       	movw	r16, r20
 6bc:	fc 01       	movw	r30, r24
 6be:	17 82       	std	Z+7, r1	; 0x07
 6c0:	16 82       	std	Z+6, r1	; 0x06
 6c2:	83 81       	ldd	r24, Z+3	; 0x03
 6c4:	81 ff       	sbrs	r24, 1
 6c6:	cc c1       	rjmp	.+920    	; 0xa60 <vfprintf+0x3b6>
 6c8:	ce 01       	movw	r24, r28
 6ca:	01 96       	adiw	r24, 0x01	; 1
 6cc:	3c 01       	movw	r6, r24
 6ce:	f6 01       	movw	r30, r12
 6d0:	93 81       	ldd	r25, Z+3	; 0x03
 6d2:	f7 01       	movw	r30, r14
 6d4:	93 fd       	sbrc	r25, 3
 6d6:	85 91       	lpm	r24, Z+
 6d8:	93 ff       	sbrs	r25, 3
 6da:	81 91       	ld	r24, Z+
 6dc:	7f 01       	movw	r14, r30
 6de:	88 23       	and	r24, r24
 6e0:	09 f4       	brne	.+2      	; 0x6e4 <vfprintf+0x3a>
 6e2:	ba c1       	rjmp	.+884    	; 0xa58 <vfprintf+0x3ae>
 6e4:	85 32       	cpi	r24, 0x25	; 37
 6e6:	39 f4       	brne	.+14     	; 0x6f6 <vfprintf+0x4c>
 6e8:	93 fd       	sbrc	r25, 3
 6ea:	85 91       	lpm	r24, Z+
 6ec:	93 ff       	sbrs	r25, 3
 6ee:	81 91       	ld	r24, Z+
 6f0:	7f 01       	movw	r14, r30
 6f2:	85 32       	cpi	r24, 0x25	; 37
 6f4:	29 f4       	brne	.+10     	; 0x700 <vfprintf+0x56>
 6f6:	b6 01       	movw	r22, r12
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 6fe:	e7 cf       	rjmp	.-50     	; 0x6ce <vfprintf+0x24>
 700:	91 2c       	mov	r9, r1
 702:	21 2c       	mov	r2, r1
 704:	31 2c       	mov	r3, r1
 706:	ff e1       	ldi	r31, 0x1F	; 31
 708:	f3 15       	cp	r31, r3
 70a:	d8 f0       	brcs	.+54     	; 0x742 <vfprintf+0x98>
 70c:	8b 32       	cpi	r24, 0x2B	; 43
 70e:	79 f0       	breq	.+30     	; 0x72e <vfprintf+0x84>
 710:	38 f4       	brcc	.+14     	; 0x720 <vfprintf+0x76>
 712:	80 32       	cpi	r24, 0x20	; 32
 714:	79 f0       	breq	.+30     	; 0x734 <vfprintf+0x8a>
 716:	83 32       	cpi	r24, 0x23	; 35
 718:	a1 f4       	brne	.+40     	; 0x742 <vfprintf+0x98>
 71a:	23 2d       	mov	r18, r3
 71c:	20 61       	ori	r18, 0x10	; 16
 71e:	1d c0       	rjmp	.+58     	; 0x75a <vfprintf+0xb0>
 720:	8d 32       	cpi	r24, 0x2D	; 45
 722:	61 f0       	breq	.+24     	; 0x73c <vfprintf+0x92>
 724:	80 33       	cpi	r24, 0x30	; 48
 726:	69 f4       	brne	.+26     	; 0x742 <vfprintf+0x98>
 728:	23 2d       	mov	r18, r3
 72a:	21 60       	ori	r18, 0x01	; 1
 72c:	16 c0       	rjmp	.+44     	; 0x75a <vfprintf+0xb0>
 72e:	83 2d       	mov	r24, r3
 730:	82 60       	ori	r24, 0x02	; 2
 732:	38 2e       	mov	r3, r24
 734:	e3 2d       	mov	r30, r3
 736:	e4 60       	ori	r30, 0x04	; 4
 738:	3e 2e       	mov	r3, r30
 73a:	2a c0       	rjmp	.+84     	; 0x790 <vfprintf+0xe6>
 73c:	f3 2d       	mov	r31, r3
 73e:	f8 60       	ori	r31, 0x08	; 8
 740:	1d c0       	rjmp	.+58     	; 0x77c <vfprintf+0xd2>
 742:	37 fc       	sbrc	r3, 7
 744:	2d c0       	rjmp	.+90     	; 0x7a0 <vfprintf+0xf6>
 746:	20 ed       	ldi	r18, 0xD0	; 208
 748:	28 0f       	add	r18, r24
 74a:	2a 30       	cpi	r18, 0x0A	; 10
 74c:	40 f0       	brcs	.+16     	; 0x75e <vfprintf+0xb4>
 74e:	8e 32       	cpi	r24, 0x2E	; 46
 750:	b9 f4       	brne	.+46     	; 0x780 <vfprintf+0xd6>
 752:	36 fc       	sbrc	r3, 6
 754:	81 c1       	rjmp	.+770    	; 0xa58 <vfprintf+0x3ae>
 756:	23 2d       	mov	r18, r3
 758:	20 64       	ori	r18, 0x40	; 64
 75a:	32 2e       	mov	r3, r18
 75c:	19 c0       	rjmp	.+50     	; 0x790 <vfprintf+0xe6>
 75e:	36 fe       	sbrs	r3, 6
 760:	06 c0       	rjmp	.+12     	; 0x76e <vfprintf+0xc4>
 762:	8a e0       	ldi	r24, 0x0A	; 10
 764:	98 9e       	mul	r9, r24
 766:	20 0d       	add	r18, r0
 768:	11 24       	eor	r1, r1
 76a:	92 2e       	mov	r9, r18
 76c:	11 c0       	rjmp	.+34     	; 0x790 <vfprintf+0xe6>
 76e:	ea e0       	ldi	r30, 0x0A	; 10
 770:	2e 9e       	mul	r2, r30
 772:	20 0d       	add	r18, r0
 774:	11 24       	eor	r1, r1
 776:	22 2e       	mov	r2, r18
 778:	f3 2d       	mov	r31, r3
 77a:	f0 62       	ori	r31, 0x20	; 32
 77c:	3f 2e       	mov	r3, r31
 77e:	08 c0       	rjmp	.+16     	; 0x790 <vfprintf+0xe6>
 780:	8c 36       	cpi	r24, 0x6C	; 108
 782:	21 f4       	brne	.+8      	; 0x78c <vfprintf+0xe2>
 784:	83 2d       	mov	r24, r3
 786:	80 68       	ori	r24, 0x80	; 128
 788:	38 2e       	mov	r3, r24
 78a:	02 c0       	rjmp	.+4      	; 0x790 <vfprintf+0xe6>
 78c:	88 36       	cpi	r24, 0x68	; 104
 78e:	41 f4       	brne	.+16     	; 0x7a0 <vfprintf+0xf6>
 790:	f7 01       	movw	r30, r14
 792:	93 fd       	sbrc	r25, 3
 794:	85 91       	lpm	r24, Z+
 796:	93 ff       	sbrs	r25, 3
 798:	81 91       	ld	r24, Z+
 79a:	7f 01       	movw	r14, r30
 79c:	81 11       	cpse	r24, r1
 79e:	b3 cf       	rjmp	.-154    	; 0x706 <vfprintf+0x5c>
 7a0:	98 2f       	mov	r25, r24
 7a2:	9f 7d       	andi	r25, 0xDF	; 223
 7a4:	95 54       	subi	r25, 0x45	; 69
 7a6:	93 30       	cpi	r25, 0x03	; 3
 7a8:	28 f4       	brcc	.+10     	; 0x7b4 <vfprintf+0x10a>
 7aa:	0c 5f       	subi	r16, 0xFC	; 252
 7ac:	1f 4f       	sbci	r17, 0xFF	; 255
 7ae:	9f e3       	ldi	r25, 0x3F	; 63
 7b0:	99 83       	std	Y+1, r25	; 0x01
 7b2:	0d c0       	rjmp	.+26     	; 0x7ce <vfprintf+0x124>
 7b4:	83 36       	cpi	r24, 0x63	; 99
 7b6:	31 f0       	breq	.+12     	; 0x7c4 <vfprintf+0x11a>
 7b8:	83 37       	cpi	r24, 0x73	; 115
 7ba:	71 f0       	breq	.+28     	; 0x7d8 <vfprintf+0x12e>
 7bc:	83 35       	cpi	r24, 0x53	; 83
 7be:	09 f0       	breq	.+2      	; 0x7c2 <vfprintf+0x118>
 7c0:	59 c0       	rjmp	.+178    	; 0x874 <vfprintf+0x1ca>
 7c2:	21 c0       	rjmp	.+66     	; 0x806 <vfprintf+0x15c>
 7c4:	f8 01       	movw	r30, r16
 7c6:	80 81       	ld	r24, Z
 7c8:	89 83       	std	Y+1, r24	; 0x01
 7ca:	0e 5f       	subi	r16, 0xFE	; 254
 7cc:	1f 4f       	sbci	r17, 0xFF	; 255
 7ce:	88 24       	eor	r8, r8
 7d0:	83 94       	inc	r8
 7d2:	91 2c       	mov	r9, r1
 7d4:	53 01       	movw	r10, r6
 7d6:	13 c0       	rjmp	.+38     	; 0x7fe <vfprintf+0x154>
 7d8:	28 01       	movw	r4, r16
 7da:	f2 e0       	ldi	r31, 0x02	; 2
 7dc:	4f 0e       	add	r4, r31
 7de:	51 1c       	adc	r5, r1
 7e0:	f8 01       	movw	r30, r16
 7e2:	a0 80       	ld	r10, Z
 7e4:	b1 80       	ldd	r11, Z+1	; 0x01
 7e6:	36 fe       	sbrs	r3, 6
 7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <vfprintf+0x146>
 7ea:	69 2d       	mov	r22, r9
 7ec:	70 e0       	ldi	r23, 0x00	; 0
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <vfprintf+0x14a>
 7f0:	6f ef       	ldi	r22, 0xFF	; 255
 7f2:	7f ef       	ldi	r23, 0xFF	; 255
 7f4:	c5 01       	movw	r24, r10
 7f6:	0e 94 85 06 	call	0xd0a	; 0xd0a <strnlen>
 7fa:	4c 01       	movw	r8, r24
 7fc:	82 01       	movw	r16, r4
 7fe:	f3 2d       	mov	r31, r3
 800:	ff 77       	andi	r31, 0x7F	; 127
 802:	3f 2e       	mov	r3, r31
 804:	16 c0       	rjmp	.+44     	; 0x832 <vfprintf+0x188>
 806:	28 01       	movw	r4, r16
 808:	22 e0       	ldi	r18, 0x02	; 2
 80a:	42 0e       	add	r4, r18
 80c:	51 1c       	adc	r5, r1
 80e:	f8 01       	movw	r30, r16
 810:	a0 80       	ld	r10, Z
 812:	b1 80       	ldd	r11, Z+1	; 0x01
 814:	36 fe       	sbrs	r3, 6
 816:	03 c0       	rjmp	.+6      	; 0x81e <vfprintf+0x174>
 818:	69 2d       	mov	r22, r9
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	02 c0       	rjmp	.+4      	; 0x822 <vfprintf+0x178>
 81e:	6f ef       	ldi	r22, 0xFF	; 255
 820:	7f ef       	ldi	r23, 0xFF	; 255
 822:	c5 01       	movw	r24, r10
 824:	0e 94 73 06 	call	0xce6	; 0xce6 <strnlen_P>
 828:	4c 01       	movw	r8, r24
 82a:	f3 2d       	mov	r31, r3
 82c:	f0 68       	ori	r31, 0x80	; 128
 82e:	3f 2e       	mov	r3, r31
 830:	82 01       	movw	r16, r4
 832:	33 fc       	sbrc	r3, 3
 834:	1b c0       	rjmp	.+54     	; 0x86c <vfprintf+0x1c2>
 836:	82 2d       	mov	r24, r2
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	88 16       	cp	r8, r24
 83c:	99 06       	cpc	r9, r25
 83e:	b0 f4       	brcc	.+44     	; 0x86c <vfprintf+0x1c2>
 840:	b6 01       	movw	r22, r12
 842:	80 e2       	ldi	r24, 0x20	; 32
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 84a:	2a 94       	dec	r2
 84c:	f4 cf       	rjmp	.-24     	; 0x836 <vfprintf+0x18c>
 84e:	f5 01       	movw	r30, r10
 850:	37 fc       	sbrc	r3, 7
 852:	85 91       	lpm	r24, Z+
 854:	37 fe       	sbrs	r3, 7
 856:	81 91       	ld	r24, Z+
 858:	5f 01       	movw	r10, r30
 85a:	b6 01       	movw	r22, r12
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 862:	21 10       	cpse	r2, r1
 864:	2a 94       	dec	r2
 866:	21 e0       	ldi	r18, 0x01	; 1
 868:	82 1a       	sub	r8, r18
 86a:	91 08       	sbc	r9, r1
 86c:	81 14       	cp	r8, r1
 86e:	91 04       	cpc	r9, r1
 870:	71 f7       	brne	.-36     	; 0x84e <vfprintf+0x1a4>
 872:	e8 c0       	rjmp	.+464    	; 0xa44 <vfprintf+0x39a>
 874:	84 36       	cpi	r24, 0x64	; 100
 876:	11 f0       	breq	.+4      	; 0x87c <vfprintf+0x1d2>
 878:	89 36       	cpi	r24, 0x69	; 105
 87a:	41 f5       	brne	.+80     	; 0x8cc <vfprintf+0x222>
 87c:	f8 01       	movw	r30, r16
 87e:	37 fe       	sbrs	r3, 7
 880:	07 c0       	rjmp	.+14     	; 0x890 <vfprintf+0x1e6>
 882:	60 81       	ld	r22, Z
 884:	71 81       	ldd	r23, Z+1	; 0x01
 886:	82 81       	ldd	r24, Z+2	; 0x02
 888:	93 81       	ldd	r25, Z+3	; 0x03
 88a:	0c 5f       	subi	r16, 0xFC	; 252
 88c:	1f 4f       	sbci	r17, 0xFF	; 255
 88e:	08 c0       	rjmp	.+16     	; 0x8a0 <vfprintf+0x1f6>
 890:	60 81       	ld	r22, Z
 892:	71 81       	ldd	r23, Z+1	; 0x01
 894:	07 2e       	mov	r0, r23
 896:	00 0c       	add	r0, r0
 898:	88 0b       	sbc	r24, r24
 89a:	99 0b       	sbc	r25, r25
 89c:	0e 5f       	subi	r16, 0xFE	; 254
 89e:	1f 4f       	sbci	r17, 0xFF	; 255
 8a0:	f3 2d       	mov	r31, r3
 8a2:	ff 76       	andi	r31, 0x6F	; 111
 8a4:	3f 2e       	mov	r3, r31
 8a6:	97 ff       	sbrs	r25, 7
 8a8:	09 c0       	rjmp	.+18     	; 0x8bc <vfprintf+0x212>
 8aa:	90 95       	com	r25
 8ac:	80 95       	com	r24
 8ae:	70 95       	com	r23
 8b0:	61 95       	neg	r22
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255
 8b4:	8f 4f       	sbci	r24, 0xFF	; 255
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	f0 68       	ori	r31, 0x80	; 128
 8ba:	3f 2e       	mov	r3, r31
 8bc:	2a e0       	ldi	r18, 0x0A	; 10
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	a3 01       	movw	r20, r6
 8c2:	0e 94 cc 06 	call	0xd98	; 0xd98 <__ultoa_invert>
 8c6:	88 2e       	mov	r8, r24
 8c8:	86 18       	sub	r8, r6
 8ca:	45 c0       	rjmp	.+138    	; 0x956 <vfprintf+0x2ac>
 8cc:	85 37       	cpi	r24, 0x75	; 117
 8ce:	31 f4       	brne	.+12     	; 0x8dc <vfprintf+0x232>
 8d0:	23 2d       	mov	r18, r3
 8d2:	2f 7e       	andi	r18, 0xEF	; 239
 8d4:	b2 2e       	mov	r11, r18
 8d6:	2a e0       	ldi	r18, 0x0A	; 10
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	25 c0       	rjmp	.+74     	; 0x926 <vfprintf+0x27c>
 8dc:	93 2d       	mov	r25, r3
 8de:	99 7f       	andi	r25, 0xF9	; 249
 8e0:	b9 2e       	mov	r11, r25
 8e2:	8f 36       	cpi	r24, 0x6F	; 111
 8e4:	c1 f0       	breq	.+48     	; 0x916 <vfprintf+0x26c>
 8e6:	18 f4       	brcc	.+6      	; 0x8ee <vfprintf+0x244>
 8e8:	88 35       	cpi	r24, 0x58	; 88
 8ea:	79 f0       	breq	.+30     	; 0x90a <vfprintf+0x260>
 8ec:	b5 c0       	rjmp	.+362    	; 0xa58 <vfprintf+0x3ae>
 8ee:	80 37       	cpi	r24, 0x70	; 112
 8f0:	19 f0       	breq	.+6      	; 0x8f8 <vfprintf+0x24e>
 8f2:	88 37       	cpi	r24, 0x78	; 120
 8f4:	21 f0       	breq	.+8      	; 0x8fe <vfprintf+0x254>
 8f6:	b0 c0       	rjmp	.+352    	; 0xa58 <vfprintf+0x3ae>
 8f8:	e9 2f       	mov	r30, r25
 8fa:	e0 61       	ori	r30, 0x10	; 16
 8fc:	be 2e       	mov	r11, r30
 8fe:	b4 fe       	sbrs	r11, 4
 900:	0d c0       	rjmp	.+26     	; 0x91c <vfprintf+0x272>
 902:	fb 2d       	mov	r31, r11
 904:	f4 60       	ori	r31, 0x04	; 4
 906:	bf 2e       	mov	r11, r31
 908:	09 c0       	rjmp	.+18     	; 0x91c <vfprintf+0x272>
 90a:	34 fe       	sbrs	r3, 4
 90c:	0a c0       	rjmp	.+20     	; 0x922 <vfprintf+0x278>
 90e:	29 2f       	mov	r18, r25
 910:	26 60       	ori	r18, 0x06	; 6
 912:	b2 2e       	mov	r11, r18
 914:	06 c0       	rjmp	.+12     	; 0x922 <vfprintf+0x278>
 916:	28 e0       	ldi	r18, 0x08	; 8
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	05 c0       	rjmp	.+10     	; 0x926 <vfprintf+0x27c>
 91c:	20 e1       	ldi	r18, 0x10	; 16
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	02 c0       	rjmp	.+4      	; 0x926 <vfprintf+0x27c>
 922:	20 e1       	ldi	r18, 0x10	; 16
 924:	32 e0       	ldi	r19, 0x02	; 2
 926:	f8 01       	movw	r30, r16
 928:	b7 fe       	sbrs	r11, 7
 92a:	07 c0       	rjmp	.+14     	; 0x93a <vfprintf+0x290>
 92c:	60 81       	ld	r22, Z
 92e:	71 81       	ldd	r23, Z+1	; 0x01
 930:	82 81       	ldd	r24, Z+2	; 0x02
 932:	93 81       	ldd	r25, Z+3	; 0x03
 934:	0c 5f       	subi	r16, 0xFC	; 252
 936:	1f 4f       	sbci	r17, 0xFF	; 255
 938:	06 c0       	rjmp	.+12     	; 0x946 <vfprintf+0x29c>
 93a:	60 81       	ld	r22, Z
 93c:	71 81       	ldd	r23, Z+1	; 0x01
 93e:	80 e0       	ldi	r24, 0x00	; 0
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 5f       	subi	r16, 0xFE	; 254
 944:	1f 4f       	sbci	r17, 0xFF	; 255
 946:	a3 01       	movw	r20, r6
 948:	0e 94 cc 06 	call	0xd98	; 0xd98 <__ultoa_invert>
 94c:	88 2e       	mov	r8, r24
 94e:	86 18       	sub	r8, r6
 950:	fb 2d       	mov	r31, r11
 952:	ff 77       	andi	r31, 0x7F	; 127
 954:	3f 2e       	mov	r3, r31
 956:	36 fe       	sbrs	r3, 6
 958:	0d c0       	rjmp	.+26     	; 0x974 <vfprintf+0x2ca>
 95a:	23 2d       	mov	r18, r3
 95c:	2e 7f       	andi	r18, 0xFE	; 254
 95e:	a2 2e       	mov	r10, r18
 960:	89 14       	cp	r8, r9
 962:	58 f4       	brcc	.+22     	; 0x97a <vfprintf+0x2d0>
 964:	34 fe       	sbrs	r3, 4
 966:	0b c0       	rjmp	.+22     	; 0x97e <vfprintf+0x2d4>
 968:	32 fc       	sbrc	r3, 2
 96a:	09 c0       	rjmp	.+18     	; 0x97e <vfprintf+0x2d4>
 96c:	83 2d       	mov	r24, r3
 96e:	8e 7e       	andi	r24, 0xEE	; 238
 970:	a8 2e       	mov	r10, r24
 972:	05 c0       	rjmp	.+10     	; 0x97e <vfprintf+0x2d4>
 974:	b8 2c       	mov	r11, r8
 976:	a3 2c       	mov	r10, r3
 978:	03 c0       	rjmp	.+6      	; 0x980 <vfprintf+0x2d6>
 97a:	b8 2c       	mov	r11, r8
 97c:	01 c0       	rjmp	.+2      	; 0x980 <vfprintf+0x2d6>
 97e:	b9 2c       	mov	r11, r9
 980:	a4 fe       	sbrs	r10, 4
 982:	0f c0       	rjmp	.+30     	; 0x9a2 <vfprintf+0x2f8>
 984:	fe 01       	movw	r30, r28
 986:	e8 0d       	add	r30, r8
 988:	f1 1d       	adc	r31, r1
 98a:	80 81       	ld	r24, Z
 98c:	80 33       	cpi	r24, 0x30	; 48
 98e:	21 f4       	brne	.+8      	; 0x998 <vfprintf+0x2ee>
 990:	9a 2d       	mov	r25, r10
 992:	99 7e       	andi	r25, 0xE9	; 233
 994:	a9 2e       	mov	r10, r25
 996:	09 c0       	rjmp	.+18     	; 0x9aa <vfprintf+0x300>
 998:	a2 fe       	sbrs	r10, 2
 99a:	06 c0       	rjmp	.+12     	; 0x9a8 <vfprintf+0x2fe>
 99c:	b3 94       	inc	r11
 99e:	b3 94       	inc	r11
 9a0:	04 c0       	rjmp	.+8      	; 0x9aa <vfprintf+0x300>
 9a2:	8a 2d       	mov	r24, r10
 9a4:	86 78       	andi	r24, 0x86	; 134
 9a6:	09 f0       	breq	.+2      	; 0x9aa <vfprintf+0x300>
 9a8:	b3 94       	inc	r11
 9aa:	a3 fc       	sbrc	r10, 3
 9ac:	11 c0       	rjmp	.+34     	; 0x9d0 <vfprintf+0x326>
 9ae:	a0 fe       	sbrs	r10, 0
 9b0:	06 c0       	rjmp	.+12     	; 0x9be <vfprintf+0x314>
 9b2:	b2 14       	cp	r11, r2
 9b4:	88 f4       	brcc	.+34     	; 0x9d8 <vfprintf+0x32e>
 9b6:	28 0c       	add	r2, r8
 9b8:	92 2c       	mov	r9, r2
 9ba:	9b 18       	sub	r9, r11
 9bc:	0e c0       	rjmp	.+28     	; 0x9da <vfprintf+0x330>
 9be:	b2 14       	cp	r11, r2
 9c0:	60 f4       	brcc	.+24     	; 0x9da <vfprintf+0x330>
 9c2:	b6 01       	movw	r22, r12
 9c4:	80 e2       	ldi	r24, 0x20	; 32
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 9cc:	b3 94       	inc	r11
 9ce:	f7 cf       	rjmp	.-18     	; 0x9be <vfprintf+0x314>
 9d0:	b2 14       	cp	r11, r2
 9d2:	18 f4       	brcc	.+6      	; 0x9da <vfprintf+0x330>
 9d4:	2b 18       	sub	r2, r11
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <vfprintf+0x332>
 9d8:	98 2c       	mov	r9, r8
 9da:	21 2c       	mov	r2, r1
 9dc:	a4 fe       	sbrs	r10, 4
 9de:	10 c0       	rjmp	.+32     	; 0xa00 <vfprintf+0x356>
 9e0:	b6 01       	movw	r22, r12
 9e2:	80 e3       	ldi	r24, 0x30	; 48
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 9ea:	a2 fe       	sbrs	r10, 2
 9ec:	17 c0       	rjmp	.+46     	; 0xa1c <vfprintf+0x372>
 9ee:	a1 fc       	sbrc	r10, 1
 9f0:	03 c0       	rjmp	.+6      	; 0x9f8 <vfprintf+0x34e>
 9f2:	88 e7       	ldi	r24, 0x78	; 120
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <vfprintf+0x352>
 9f8:	88 e5       	ldi	r24, 0x58	; 88
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	b6 01       	movw	r22, r12
 9fe:	0c c0       	rjmp	.+24     	; 0xa18 <vfprintf+0x36e>
 a00:	8a 2d       	mov	r24, r10
 a02:	86 78       	andi	r24, 0x86	; 134
 a04:	59 f0       	breq	.+22     	; 0xa1c <vfprintf+0x372>
 a06:	a1 fe       	sbrs	r10, 1
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <vfprintf+0x364>
 a0a:	8b e2       	ldi	r24, 0x2B	; 43
 a0c:	01 c0       	rjmp	.+2      	; 0xa10 <vfprintf+0x366>
 a0e:	80 e2       	ldi	r24, 0x20	; 32
 a10:	a7 fc       	sbrc	r10, 7
 a12:	8d e2       	ldi	r24, 0x2D	; 45
 a14:	b6 01       	movw	r22, r12
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 a1c:	89 14       	cp	r8, r9
 a1e:	38 f4       	brcc	.+14     	; 0xa2e <vfprintf+0x384>
 a20:	b6 01       	movw	r22, r12
 a22:	80 e3       	ldi	r24, 0x30	; 48
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 a2a:	9a 94       	dec	r9
 a2c:	f7 cf       	rjmp	.-18     	; 0xa1c <vfprintf+0x372>
 a2e:	8a 94       	dec	r8
 a30:	f3 01       	movw	r30, r6
 a32:	e8 0d       	add	r30, r8
 a34:	f1 1d       	adc	r31, r1
 a36:	80 81       	ld	r24, Z
 a38:	b6 01       	movw	r22, r12
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 a40:	81 10       	cpse	r8, r1
 a42:	f5 cf       	rjmp	.-22     	; 0xa2e <vfprintf+0x384>
 a44:	22 20       	and	r2, r2
 a46:	09 f4       	brne	.+2      	; 0xa4a <vfprintf+0x3a0>
 a48:	42 ce       	rjmp	.-892    	; 0x6ce <vfprintf+0x24>
 a4a:	b6 01       	movw	r22, r12
 a4c:	80 e2       	ldi	r24, 0x20	; 32
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 a54:	2a 94       	dec	r2
 a56:	f6 cf       	rjmp	.-20     	; 0xa44 <vfprintf+0x39a>
 a58:	f6 01       	movw	r30, r12
 a5a:	86 81       	ldd	r24, Z+6	; 0x06
 a5c:	97 81       	ldd	r25, Z+7	; 0x07
 a5e:	02 c0       	rjmp	.+4      	; 0xa64 <vfprintf+0x3ba>
 a60:	8f ef       	ldi	r24, 0xFF	; 255
 a62:	9f ef       	ldi	r25, 0xFF	; 255
 a64:	2b 96       	adiw	r28, 0x0b	; 11
 a66:	e2 e1       	ldi	r30, 0x12	; 18
 a68:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__epilogue_restores__>

00000a6c <calloc>:
 a6c:	0f 93       	push	r16
 a6e:	1f 93       	push	r17
 a70:	cf 93       	push	r28
 a72:	df 93       	push	r29
 a74:	86 9f       	mul	r24, r22
 a76:	80 01       	movw	r16, r0
 a78:	87 9f       	mul	r24, r23
 a7a:	10 0d       	add	r17, r0
 a7c:	96 9f       	mul	r25, r22
 a7e:	10 0d       	add	r17, r0
 a80:	11 24       	eor	r1, r1
 a82:	c8 01       	movw	r24, r16
 a84:	0e 94 52 05 	call	0xaa4	; 0xaa4 <malloc>
 a88:	ec 01       	movw	r28, r24
 a8a:	00 97       	sbiw	r24, 0x00	; 0
 a8c:	29 f0       	breq	.+10     	; 0xa98 <calloc+0x2c>
 a8e:	a8 01       	movw	r20, r16
 a90:	60 e0       	ldi	r22, 0x00	; 0
 a92:	70 e0       	ldi	r23, 0x00	; 0
 a94:	0e 94 7e 06 	call	0xcfc	; 0xcfc <memset>
 a98:	ce 01       	movw	r24, r28
 a9a:	df 91       	pop	r29
 a9c:	cf 91       	pop	r28
 a9e:	1f 91       	pop	r17
 aa0:	0f 91       	pop	r16
 aa2:	08 95       	ret

00000aa4 <malloc>:
 aa4:	0f 93       	push	r16
 aa6:	1f 93       	push	r17
 aa8:	cf 93       	push	r28
 aaa:	df 93       	push	r29
 aac:	82 30       	cpi	r24, 0x02	; 2
 aae:	91 05       	cpc	r25, r1
 ab0:	10 f4       	brcc	.+4      	; 0xab6 <malloc+0x12>
 ab2:	82 e0       	ldi	r24, 0x02	; 2
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <__flp>
 aba:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <__flp+0x1>
 abe:	20 e0       	ldi	r18, 0x00	; 0
 ac0:	30 e0       	ldi	r19, 0x00	; 0
 ac2:	a0 e0       	ldi	r26, 0x00	; 0
 ac4:	b0 e0       	ldi	r27, 0x00	; 0
 ac6:	30 97       	sbiw	r30, 0x00	; 0
 ac8:	19 f1       	breq	.+70     	; 0xb10 <malloc+0x6c>
 aca:	40 81       	ld	r20, Z
 acc:	51 81       	ldd	r21, Z+1	; 0x01
 ace:	02 81       	ldd	r16, Z+2	; 0x02
 ad0:	13 81       	ldd	r17, Z+3	; 0x03
 ad2:	48 17       	cp	r20, r24
 ad4:	59 07       	cpc	r21, r25
 ad6:	c8 f0       	brcs	.+50     	; 0xb0a <malloc+0x66>
 ad8:	84 17       	cp	r24, r20
 ada:	95 07       	cpc	r25, r21
 adc:	69 f4       	brne	.+26     	; 0xaf8 <malloc+0x54>
 ade:	10 97       	sbiw	r26, 0x00	; 0
 ae0:	31 f0       	breq	.+12     	; 0xaee <malloc+0x4a>
 ae2:	12 96       	adiw	r26, 0x02	; 2
 ae4:	0c 93       	st	X, r16
 ae6:	12 97       	sbiw	r26, 0x02	; 2
 ae8:	13 96       	adiw	r26, 0x03	; 3
 aea:	1c 93       	st	X, r17
 aec:	27 c0       	rjmp	.+78     	; 0xb3c <malloc+0x98>
 aee:	00 93 52 03 	sts	0x0352, r16	; 0x800352 <__flp>
 af2:	10 93 53 03 	sts	0x0353, r17	; 0x800353 <__flp+0x1>
 af6:	22 c0       	rjmp	.+68     	; 0xb3c <malloc+0x98>
 af8:	21 15       	cp	r18, r1
 afa:	31 05       	cpc	r19, r1
 afc:	19 f0       	breq	.+6      	; 0xb04 <malloc+0x60>
 afe:	42 17       	cp	r20, r18
 b00:	53 07       	cpc	r21, r19
 b02:	18 f4       	brcc	.+6      	; 0xb0a <malloc+0x66>
 b04:	9a 01       	movw	r18, r20
 b06:	bd 01       	movw	r22, r26
 b08:	ef 01       	movw	r28, r30
 b0a:	df 01       	movw	r26, r30
 b0c:	f8 01       	movw	r30, r16
 b0e:	db cf       	rjmp	.-74     	; 0xac6 <malloc+0x22>
 b10:	21 15       	cp	r18, r1
 b12:	31 05       	cpc	r19, r1
 b14:	f9 f0       	breq	.+62     	; 0xb54 <malloc+0xb0>
 b16:	28 1b       	sub	r18, r24
 b18:	39 0b       	sbc	r19, r25
 b1a:	24 30       	cpi	r18, 0x04	; 4
 b1c:	31 05       	cpc	r19, r1
 b1e:	80 f4       	brcc	.+32     	; 0xb40 <malloc+0x9c>
 b20:	8a 81       	ldd	r24, Y+2	; 0x02
 b22:	9b 81       	ldd	r25, Y+3	; 0x03
 b24:	61 15       	cp	r22, r1
 b26:	71 05       	cpc	r23, r1
 b28:	21 f0       	breq	.+8      	; 0xb32 <malloc+0x8e>
 b2a:	fb 01       	movw	r30, r22
 b2c:	93 83       	std	Z+3, r25	; 0x03
 b2e:	82 83       	std	Z+2, r24	; 0x02
 b30:	04 c0       	rjmp	.+8      	; 0xb3a <malloc+0x96>
 b32:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <__flp+0x1>
 b36:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <__flp>
 b3a:	fe 01       	movw	r30, r28
 b3c:	32 96       	adiw	r30, 0x02	; 2
 b3e:	44 c0       	rjmp	.+136    	; 0xbc8 <malloc+0x124>
 b40:	fe 01       	movw	r30, r28
 b42:	e2 0f       	add	r30, r18
 b44:	f3 1f       	adc	r31, r19
 b46:	81 93       	st	Z+, r24
 b48:	91 93       	st	Z+, r25
 b4a:	22 50       	subi	r18, 0x02	; 2
 b4c:	31 09       	sbc	r19, r1
 b4e:	39 83       	std	Y+1, r19	; 0x01
 b50:	28 83       	st	Y, r18
 b52:	3a c0       	rjmp	.+116    	; 0xbc8 <malloc+0x124>
 b54:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <__brkval>
 b58:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <__brkval+0x1>
 b5c:	23 2b       	or	r18, r19
 b5e:	41 f4       	brne	.+16     	; 0xb70 <malloc+0xcc>
 b60:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 b64:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 b68:	30 93 51 03 	sts	0x0351, r19	; 0x800351 <__brkval+0x1>
 b6c:	20 93 50 03 	sts	0x0350, r18	; 0x800350 <__brkval>
 b70:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 b74:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 b78:	21 15       	cp	r18, r1
 b7a:	31 05       	cpc	r19, r1
 b7c:	41 f4       	brne	.+16     	; 0xb8e <malloc+0xea>
 b7e:	2d b7       	in	r18, 0x3d	; 61
 b80:	3e b7       	in	r19, 0x3e	; 62
 b82:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 b86:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 b8a:	24 1b       	sub	r18, r20
 b8c:	35 0b       	sbc	r19, r21
 b8e:	e0 91 50 03 	lds	r30, 0x0350	; 0x800350 <__brkval>
 b92:	f0 91 51 03 	lds	r31, 0x0351	; 0x800351 <__brkval+0x1>
 b96:	e2 17       	cp	r30, r18
 b98:	f3 07       	cpc	r31, r19
 b9a:	a0 f4       	brcc	.+40     	; 0xbc4 <malloc+0x120>
 b9c:	2e 1b       	sub	r18, r30
 b9e:	3f 0b       	sbc	r19, r31
 ba0:	28 17       	cp	r18, r24
 ba2:	39 07       	cpc	r19, r25
 ba4:	78 f0       	brcs	.+30     	; 0xbc4 <malloc+0x120>
 ba6:	ac 01       	movw	r20, r24
 ba8:	4e 5f       	subi	r20, 0xFE	; 254
 baa:	5f 4f       	sbci	r21, 0xFF	; 255
 bac:	24 17       	cp	r18, r20
 bae:	35 07       	cpc	r19, r21
 bb0:	48 f0       	brcs	.+18     	; 0xbc4 <malloc+0x120>
 bb2:	4e 0f       	add	r20, r30
 bb4:	5f 1f       	adc	r21, r31
 bb6:	50 93 51 03 	sts	0x0351, r21	; 0x800351 <__brkval+0x1>
 bba:	40 93 50 03 	sts	0x0350, r20	; 0x800350 <__brkval>
 bbe:	81 93       	st	Z+, r24
 bc0:	91 93       	st	Z+, r25
 bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <malloc+0x124>
 bc4:	e0 e0       	ldi	r30, 0x00	; 0
 bc6:	f0 e0       	ldi	r31, 0x00	; 0
 bc8:	cf 01       	movw	r24, r30
 bca:	df 91       	pop	r29
 bcc:	cf 91       	pop	r28
 bce:	1f 91       	pop	r17
 bd0:	0f 91       	pop	r16
 bd2:	08 95       	ret

00000bd4 <free>:
 bd4:	cf 93       	push	r28
 bd6:	df 93       	push	r29
 bd8:	00 97       	sbiw	r24, 0x00	; 0
 bda:	09 f4       	brne	.+2      	; 0xbde <free+0xa>
 bdc:	81 c0       	rjmp	.+258    	; 0xce0 <free+0x10c>
 bde:	fc 01       	movw	r30, r24
 be0:	32 97       	sbiw	r30, 0x02	; 2
 be2:	13 82       	std	Z+3, r1	; 0x03
 be4:	12 82       	std	Z+2, r1	; 0x02
 be6:	a0 91 52 03 	lds	r26, 0x0352	; 0x800352 <__flp>
 bea:	b0 91 53 03 	lds	r27, 0x0353	; 0x800353 <__flp+0x1>
 bee:	10 97       	sbiw	r26, 0x00	; 0
 bf0:	81 f4       	brne	.+32     	; 0xc12 <free+0x3e>
 bf2:	20 81       	ld	r18, Z
 bf4:	31 81       	ldd	r19, Z+1	; 0x01
 bf6:	82 0f       	add	r24, r18
 bf8:	93 1f       	adc	r25, r19
 bfa:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <__brkval>
 bfe:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <__brkval+0x1>
 c02:	28 17       	cp	r18, r24
 c04:	39 07       	cpc	r19, r25
 c06:	51 f5       	brne	.+84     	; 0xc5c <free+0x88>
 c08:	f0 93 51 03 	sts	0x0351, r31	; 0x800351 <__brkval+0x1>
 c0c:	e0 93 50 03 	sts	0x0350, r30	; 0x800350 <__brkval>
 c10:	67 c0       	rjmp	.+206    	; 0xce0 <free+0x10c>
 c12:	ed 01       	movw	r28, r26
 c14:	20 e0       	ldi	r18, 0x00	; 0
 c16:	30 e0       	ldi	r19, 0x00	; 0
 c18:	ce 17       	cp	r28, r30
 c1a:	df 07       	cpc	r29, r31
 c1c:	40 f4       	brcc	.+16     	; 0xc2e <free+0x5a>
 c1e:	4a 81       	ldd	r20, Y+2	; 0x02
 c20:	5b 81       	ldd	r21, Y+3	; 0x03
 c22:	9e 01       	movw	r18, r28
 c24:	41 15       	cp	r20, r1
 c26:	51 05       	cpc	r21, r1
 c28:	f1 f0       	breq	.+60     	; 0xc66 <free+0x92>
 c2a:	ea 01       	movw	r28, r20
 c2c:	f5 cf       	rjmp	.-22     	; 0xc18 <free+0x44>
 c2e:	d3 83       	std	Z+3, r29	; 0x03
 c30:	c2 83       	std	Z+2, r28	; 0x02
 c32:	40 81       	ld	r20, Z
 c34:	51 81       	ldd	r21, Z+1	; 0x01
 c36:	84 0f       	add	r24, r20
 c38:	95 1f       	adc	r25, r21
 c3a:	c8 17       	cp	r28, r24
 c3c:	d9 07       	cpc	r29, r25
 c3e:	59 f4       	brne	.+22     	; 0xc56 <free+0x82>
 c40:	88 81       	ld	r24, Y
 c42:	99 81       	ldd	r25, Y+1	; 0x01
 c44:	84 0f       	add	r24, r20
 c46:	95 1f       	adc	r25, r21
 c48:	02 96       	adiw	r24, 0x02	; 2
 c4a:	91 83       	std	Z+1, r25	; 0x01
 c4c:	80 83       	st	Z, r24
 c4e:	8a 81       	ldd	r24, Y+2	; 0x02
 c50:	9b 81       	ldd	r25, Y+3	; 0x03
 c52:	93 83       	std	Z+3, r25	; 0x03
 c54:	82 83       	std	Z+2, r24	; 0x02
 c56:	21 15       	cp	r18, r1
 c58:	31 05       	cpc	r19, r1
 c5a:	29 f4       	brne	.+10     	; 0xc66 <free+0x92>
 c5c:	f0 93 53 03 	sts	0x0353, r31	; 0x800353 <__flp+0x1>
 c60:	e0 93 52 03 	sts	0x0352, r30	; 0x800352 <__flp>
 c64:	3d c0       	rjmp	.+122    	; 0xce0 <free+0x10c>
 c66:	e9 01       	movw	r28, r18
 c68:	fb 83       	std	Y+3, r31	; 0x03
 c6a:	ea 83       	std	Y+2, r30	; 0x02
 c6c:	49 91       	ld	r20, Y+
 c6e:	59 91       	ld	r21, Y+
 c70:	c4 0f       	add	r28, r20
 c72:	d5 1f       	adc	r29, r21
 c74:	ec 17       	cp	r30, r28
 c76:	fd 07       	cpc	r31, r29
 c78:	61 f4       	brne	.+24     	; 0xc92 <free+0xbe>
 c7a:	80 81       	ld	r24, Z
 c7c:	91 81       	ldd	r25, Z+1	; 0x01
 c7e:	84 0f       	add	r24, r20
 c80:	95 1f       	adc	r25, r21
 c82:	02 96       	adiw	r24, 0x02	; 2
 c84:	e9 01       	movw	r28, r18
 c86:	99 83       	std	Y+1, r25	; 0x01
 c88:	88 83       	st	Y, r24
 c8a:	82 81       	ldd	r24, Z+2	; 0x02
 c8c:	93 81       	ldd	r25, Z+3	; 0x03
 c8e:	9b 83       	std	Y+3, r25	; 0x03
 c90:	8a 83       	std	Y+2, r24	; 0x02
 c92:	e0 e0       	ldi	r30, 0x00	; 0
 c94:	f0 e0       	ldi	r31, 0x00	; 0
 c96:	12 96       	adiw	r26, 0x02	; 2
 c98:	8d 91       	ld	r24, X+
 c9a:	9c 91       	ld	r25, X
 c9c:	13 97       	sbiw	r26, 0x03	; 3
 c9e:	00 97       	sbiw	r24, 0x00	; 0
 ca0:	19 f0       	breq	.+6      	; 0xca8 <free+0xd4>
 ca2:	fd 01       	movw	r30, r26
 ca4:	dc 01       	movw	r26, r24
 ca6:	f7 cf       	rjmp	.-18     	; 0xc96 <free+0xc2>
 ca8:	8d 91       	ld	r24, X+
 caa:	9c 91       	ld	r25, X
 cac:	11 97       	sbiw	r26, 0x01	; 1
 cae:	9d 01       	movw	r18, r26
 cb0:	2e 5f       	subi	r18, 0xFE	; 254
 cb2:	3f 4f       	sbci	r19, 0xFF	; 255
 cb4:	82 0f       	add	r24, r18
 cb6:	93 1f       	adc	r25, r19
 cb8:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <__brkval>
 cbc:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <__brkval+0x1>
 cc0:	28 17       	cp	r18, r24
 cc2:	39 07       	cpc	r19, r25
 cc4:	69 f4       	brne	.+26     	; 0xce0 <free+0x10c>
 cc6:	30 97       	sbiw	r30, 0x00	; 0
 cc8:	29 f4       	brne	.+10     	; 0xcd4 <free+0x100>
 cca:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <__flp+0x1>
 cce:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <__flp>
 cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <free+0x104>
 cd4:	13 82       	std	Z+3, r1	; 0x03
 cd6:	12 82       	std	Z+2, r1	; 0x02
 cd8:	b0 93 51 03 	sts	0x0351, r27	; 0x800351 <__brkval+0x1>
 cdc:	a0 93 50 03 	sts	0x0350, r26	; 0x800350 <__brkval>
 ce0:	df 91       	pop	r29
 ce2:	cf 91       	pop	r28
 ce4:	08 95       	ret

00000ce6 <strnlen_P>:
 ce6:	fc 01       	movw	r30, r24
 ce8:	05 90       	lpm	r0, Z+
 cea:	61 50       	subi	r22, 0x01	; 1
 cec:	70 40       	sbci	r23, 0x00	; 0
 cee:	01 10       	cpse	r0, r1
 cf0:	d8 f7       	brcc	.-10     	; 0xce8 <strnlen_P+0x2>
 cf2:	80 95       	com	r24
 cf4:	90 95       	com	r25
 cf6:	8e 0f       	add	r24, r30
 cf8:	9f 1f       	adc	r25, r31
 cfa:	08 95       	ret

00000cfc <memset>:
 cfc:	dc 01       	movw	r26, r24
 cfe:	01 c0       	rjmp	.+2      	; 0xd02 <memset+0x6>
 d00:	6d 93       	st	X+, r22
 d02:	41 50       	subi	r20, 0x01	; 1
 d04:	50 40       	sbci	r21, 0x00	; 0
 d06:	e0 f7       	brcc	.-8      	; 0xd00 <memset+0x4>
 d08:	08 95       	ret

00000d0a <strnlen>:
 d0a:	fc 01       	movw	r30, r24
 d0c:	61 50       	subi	r22, 0x01	; 1
 d0e:	70 40       	sbci	r23, 0x00	; 0
 d10:	01 90       	ld	r0, Z+
 d12:	01 10       	cpse	r0, r1
 d14:	d8 f7       	brcc	.-10     	; 0xd0c <strnlen+0x2>
 d16:	80 95       	com	r24
 d18:	90 95       	com	r25
 d1a:	8e 0f       	add	r24, r30
 d1c:	9f 1f       	adc	r25, r31
 d1e:	08 95       	ret

00000d20 <fputc>:
 d20:	0f 93       	push	r16
 d22:	1f 93       	push	r17
 d24:	cf 93       	push	r28
 d26:	df 93       	push	r29
 d28:	fb 01       	movw	r30, r22
 d2a:	23 81       	ldd	r18, Z+3	; 0x03
 d2c:	21 fd       	sbrc	r18, 1
 d2e:	03 c0       	rjmp	.+6      	; 0xd36 <fputc+0x16>
 d30:	8f ef       	ldi	r24, 0xFF	; 255
 d32:	9f ef       	ldi	r25, 0xFF	; 255
 d34:	2c c0       	rjmp	.+88     	; 0xd8e <fputc+0x6e>
 d36:	22 ff       	sbrs	r18, 2
 d38:	16 c0       	rjmp	.+44     	; 0xd66 <fputc+0x46>
 d3a:	46 81       	ldd	r20, Z+6	; 0x06
 d3c:	57 81       	ldd	r21, Z+7	; 0x07
 d3e:	24 81       	ldd	r18, Z+4	; 0x04
 d40:	35 81       	ldd	r19, Z+5	; 0x05
 d42:	42 17       	cp	r20, r18
 d44:	53 07       	cpc	r21, r19
 d46:	44 f4       	brge	.+16     	; 0xd58 <fputc+0x38>
 d48:	a0 81       	ld	r26, Z
 d4a:	b1 81       	ldd	r27, Z+1	; 0x01
 d4c:	9d 01       	movw	r18, r26
 d4e:	2f 5f       	subi	r18, 0xFF	; 255
 d50:	3f 4f       	sbci	r19, 0xFF	; 255
 d52:	31 83       	std	Z+1, r19	; 0x01
 d54:	20 83       	st	Z, r18
 d56:	8c 93       	st	X, r24
 d58:	26 81       	ldd	r18, Z+6	; 0x06
 d5a:	37 81       	ldd	r19, Z+7	; 0x07
 d5c:	2f 5f       	subi	r18, 0xFF	; 255
 d5e:	3f 4f       	sbci	r19, 0xFF	; 255
 d60:	37 83       	std	Z+7, r19	; 0x07
 d62:	26 83       	std	Z+6, r18	; 0x06
 d64:	14 c0       	rjmp	.+40     	; 0xd8e <fputc+0x6e>
 d66:	8b 01       	movw	r16, r22
 d68:	ec 01       	movw	r28, r24
 d6a:	fb 01       	movw	r30, r22
 d6c:	00 84       	ldd	r0, Z+8	; 0x08
 d6e:	f1 85       	ldd	r31, Z+9	; 0x09
 d70:	e0 2d       	mov	r30, r0
 d72:	09 95       	icall
 d74:	89 2b       	or	r24, r25
 d76:	e1 f6       	brne	.-72     	; 0xd30 <fputc+0x10>
 d78:	d8 01       	movw	r26, r16
 d7a:	16 96       	adiw	r26, 0x06	; 6
 d7c:	8d 91       	ld	r24, X+
 d7e:	9c 91       	ld	r25, X
 d80:	17 97       	sbiw	r26, 0x07	; 7
 d82:	01 96       	adiw	r24, 0x01	; 1
 d84:	17 96       	adiw	r26, 0x07	; 7
 d86:	9c 93       	st	X, r25
 d88:	8e 93       	st	-X, r24
 d8a:	16 97       	sbiw	r26, 0x06	; 6
 d8c:	ce 01       	movw	r24, r28
 d8e:	df 91       	pop	r29
 d90:	cf 91       	pop	r28
 d92:	1f 91       	pop	r17
 d94:	0f 91       	pop	r16
 d96:	08 95       	ret

00000d98 <__ultoa_invert>:
 d98:	fa 01       	movw	r30, r20
 d9a:	aa 27       	eor	r26, r26
 d9c:	28 30       	cpi	r18, 0x08	; 8
 d9e:	51 f1       	breq	.+84     	; 0xdf4 <__ultoa_invert+0x5c>
 da0:	20 31       	cpi	r18, 0x10	; 16
 da2:	81 f1       	breq	.+96     	; 0xe04 <__ultoa_invert+0x6c>
 da4:	e8 94       	clt
 da6:	6f 93       	push	r22
 da8:	6e 7f       	andi	r22, 0xFE	; 254
 daa:	6e 5f       	subi	r22, 0xFE	; 254
 dac:	7f 4f       	sbci	r23, 0xFF	; 255
 dae:	8f 4f       	sbci	r24, 0xFF	; 255
 db0:	9f 4f       	sbci	r25, 0xFF	; 255
 db2:	af 4f       	sbci	r26, 0xFF	; 255
 db4:	b1 e0       	ldi	r27, 0x01	; 1
 db6:	3e d0       	rcall	.+124    	; 0xe34 <__ultoa_invert+0x9c>
 db8:	b4 e0       	ldi	r27, 0x04	; 4
 dba:	3c d0       	rcall	.+120    	; 0xe34 <__ultoa_invert+0x9c>
 dbc:	67 0f       	add	r22, r23
 dbe:	78 1f       	adc	r23, r24
 dc0:	89 1f       	adc	r24, r25
 dc2:	9a 1f       	adc	r25, r26
 dc4:	a1 1d       	adc	r26, r1
 dc6:	68 0f       	add	r22, r24
 dc8:	79 1f       	adc	r23, r25
 dca:	8a 1f       	adc	r24, r26
 dcc:	91 1d       	adc	r25, r1
 dce:	a1 1d       	adc	r26, r1
 dd0:	6a 0f       	add	r22, r26
 dd2:	71 1d       	adc	r23, r1
 dd4:	81 1d       	adc	r24, r1
 dd6:	91 1d       	adc	r25, r1
 dd8:	a1 1d       	adc	r26, r1
 dda:	20 d0       	rcall	.+64     	; 0xe1c <__ultoa_invert+0x84>
 ddc:	09 f4       	brne	.+2      	; 0xde0 <__ultoa_invert+0x48>
 dde:	68 94       	set
 de0:	3f 91       	pop	r19
 de2:	2a e0       	ldi	r18, 0x0A	; 10
 de4:	26 9f       	mul	r18, r22
 de6:	11 24       	eor	r1, r1
 de8:	30 19       	sub	r19, r0
 dea:	30 5d       	subi	r19, 0xD0	; 208
 dec:	31 93       	st	Z+, r19
 dee:	de f6       	brtc	.-74     	; 0xda6 <__ultoa_invert+0xe>
 df0:	cf 01       	movw	r24, r30
 df2:	08 95       	ret
 df4:	46 2f       	mov	r20, r22
 df6:	47 70       	andi	r20, 0x07	; 7
 df8:	40 5d       	subi	r20, 0xD0	; 208
 dfa:	41 93       	st	Z+, r20
 dfc:	b3 e0       	ldi	r27, 0x03	; 3
 dfe:	0f d0       	rcall	.+30     	; 0xe1e <__ultoa_invert+0x86>
 e00:	c9 f7       	brne	.-14     	; 0xdf4 <__ultoa_invert+0x5c>
 e02:	f6 cf       	rjmp	.-20     	; 0xdf0 <__ultoa_invert+0x58>
 e04:	46 2f       	mov	r20, r22
 e06:	4f 70       	andi	r20, 0x0F	; 15
 e08:	40 5d       	subi	r20, 0xD0	; 208
 e0a:	4a 33       	cpi	r20, 0x3A	; 58
 e0c:	18 f0       	brcs	.+6      	; 0xe14 <__ultoa_invert+0x7c>
 e0e:	49 5d       	subi	r20, 0xD9	; 217
 e10:	31 fd       	sbrc	r19, 1
 e12:	40 52       	subi	r20, 0x20	; 32
 e14:	41 93       	st	Z+, r20
 e16:	02 d0       	rcall	.+4      	; 0xe1c <__ultoa_invert+0x84>
 e18:	a9 f7       	brne	.-22     	; 0xe04 <__ultoa_invert+0x6c>
 e1a:	ea cf       	rjmp	.-44     	; 0xdf0 <__ultoa_invert+0x58>
 e1c:	b4 e0       	ldi	r27, 0x04	; 4
 e1e:	a6 95       	lsr	r26
 e20:	97 95       	ror	r25
 e22:	87 95       	ror	r24
 e24:	77 95       	ror	r23
 e26:	67 95       	ror	r22
 e28:	ba 95       	dec	r27
 e2a:	c9 f7       	brne	.-14     	; 0xe1e <__ultoa_invert+0x86>
 e2c:	00 97       	sbiw	r24, 0x00	; 0
 e2e:	61 05       	cpc	r22, r1
 e30:	71 05       	cpc	r23, r1
 e32:	08 95       	ret
 e34:	9b 01       	movw	r18, r22
 e36:	ac 01       	movw	r20, r24
 e38:	0a 2e       	mov	r0, r26
 e3a:	06 94       	lsr	r0
 e3c:	57 95       	ror	r21
 e3e:	47 95       	ror	r20
 e40:	37 95       	ror	r19
 e42:	27 95       	ror	r18
 e44:	ba 95       	dec	r27
 e46:	c9 f7       	brne	.-14     	; 0xe3a <__ultoa_invert+0xa2>
 e48:	62 0f       	add	r22, r18
 e4a:	73 1f       	adc	r23, r19
 e4c:	84 1f       	adc	r24, r20
 e4e:	95 1f       	adc	r25, r21
 e50:	a0 1d       	adc	r26, r0
 e52:	08 95       	ret

00000e54 <__prologue_saves__>:
 e54:	2f 92       	push	r2
 e56:	3f 92       	push	r3
 e58:	4f 92       	push	r4
 e5a:	5f 92       	push	r5
 e5c:	6f 92       	push	r6
 e5e:	7f 92       	push	r7
 e60:	8f 92       	push	r8
 e62:	9f 92       	push	r9
 e64:	af 92       	push	r10
 e66:	bf 92       	push	r11
 e68:	cf 92       	push	r12
 e6a:	df 92       	push	r13
 e6c:	ef 92       	push	r14
 e6e:	ff 92       	push	r15
 e70:	0f 93       	push	r16
 e72:	1f 93       	push	r17
 e74:	cf 93       	push	r28
 e76:	df 93       	push	r29
 e78:	cd b7       	in	r28, 0x3d	; 61
 e7a:	de b7       	in	r29, 0x3e	; 62
 e7c:	ca 1b       	sub	r28, r26
 e7e:	db 0b       	sbc	r29, r27
 e80:	0f b6       	in	r0, 0x3f	; 63
 e82:	f8 94       	cli
 e84:	de bf       	out	0x3e, r29	; 62
 e86:	0f be       	out	0x3f, r0	; 63
 e88:	cd bf       	out	0x3d, r28	; 61
 e8a:	09 94       	ijmp

00000e8c <__epilogue_restores__>:
 e8c:	2a 88       	ldd	r2, Y+18	; 0x12
 e8e:	39 88       	ldd	r3, Y+17	; 0x11
 e90:	48 88       	ldd	r4, Y+16	; 0x10
 e92:	5f 84       	ldd	r5, Y+15	; 0x0f
 e94:	6e 84       	ldd	r6, Y+14	; 0x0e
 e96:	7d 84       	ldd	r7, Y+13	; 0x0d
 e98:	8c 84       	ldd	r8, Y+12	; 0x0c
 e9a:	9b 84       	ldd	r9, Y+11	; 0x0b
 e9c:	aa 84       	ldd	r10, Y+10	; 0x0a
 e9e:	b9 84       	ldd	r11, Y+9	; 0x09
 ea0:	c8 84       	ldd	r12, Y+8	; 0x08
 ea2:	df 80       	ldd	r13, Y+7	; 0x07
 ea4:	ee 80       	ldd	r14, Y+6	; 0x06
 ea6:	fd 80       	ldd	r15, Y+5	; 0x05
 ea8:	0c 81       	ldd	r16, Y+4	; 0x04
 eaa:	1b 81       	ldd	r17, Y+3	; 0x03
 eac:	aa 81       	ldd	r26, Y+2	; 0x02
 eae:	b9 81       	ldd	r27, Y+1	; 0x01
 eb0:	ce 0f       	add	r28, r30
 eb2:	d1 1d       	adc	r29, r1
 eb4:	0f b6       	in	r0, 0x3f	; 63
 eb6:	f8 94       	cli
 eb8:	de bf       	out	0x3e, r29	; 62
 eba:	0f be       	out	0x3f, r0	; 63
 ebc:	cd bf       	out	0x3d, r28	; 61
 ebe:	ed 01       	movw	r28, r26
 ec0:	08 95       	ret

00000ec2 <_exit>:
 ec2:	f8 94       	cli

00000ec4 <__stop_program>:
 ec4:	ff cf       	rjmp	.-2      	; 0xec4 <__stop_program>
