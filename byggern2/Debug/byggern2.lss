
byggern2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000005c8  0000065c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  00000662  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000662  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001324  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b03  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091f  00000000  00000000  00002627  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00002f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f0  00000000  00000000  000031c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005bf  00000000  00000000  000037b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003d73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 ec       	ldi	r30, 0xC8	; 200
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 30       	cpi	r26, 0x06	; 6
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e0       	ldi	r26, 0x06	; 6
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 31       	cpi	r26, 0x10	; 16
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 44 01 	call	0x288	; 0x288 <main>
  a6:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_read>:
	return (ADC_output){data_channel_0, data_channel_1, data_channel_2, data_channel_3};
}

int to_percent(uint8_t pos_in_bit){
	return (int)pos_in_bit  * ((float)200) / ((float)256) - 100;		// Skalering: hele bredden er 200% med 0% i midten og -100% og 100% i hver sin ende
}
  ae:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x12f0>
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	80 71       	andi	r24, 0x10	; 16
  b6:	82 bb       	out	0x12, r24	; 18
  b8:	81 11       	cpse	r24, r1
  ba:	fb cf       	rjmp	.-10     	; 0xb2 <adc_read+0x4>
  bc:	e0 e0       	ldi	r30, 0x00	; 0
  be:	f4 e1       	ldi	r31, 0x14	; 20
  c0:	60 81       	ld	r22, Z
  c2:	70 81       	ld	r23, Z
  c4:	80 81       	ld	r24, Z
  c6:	90 81       	ld	r25, Z
  c8:	08 95       	ret

000000ca <calibrate_joy_stick>:

void calibrate_joy_stick(){
	ADC_output adc_output = adc_read();
  ca:	0e 94 57 00 	call	0xae	; 0xae <adc_read>
	uint8_t x = adc_output.x_axis;
	uint8_t y = adc_output.y_axis;
	
	uint8_t* x_pos_offset = (uint8_t *) ( ADDRESS_SRAM + 4); 
	*x_pos_offset = x;
  ce:	60 93 04 18 	sts	0x1804, r22	; 0x801804 <__bss_end+0x16f4>
	uint8_t* y_pos_offset = (uint8_t *) ( ADDRESS_SRAM + 8);
	*y_pos_offset = y;
  d2:	70 93 08 18 	sts	0x1808, r23	; 0x801808 <__bss_end+0x16f8>
  d6:	08 95       	ret

000000d8 <adc_init>:
#include "multifunction.h"

#define PI 3.14159265

void adc_init (void){
	DDRD |= (1 << DDD5); //Set PD5 to output
  d8:	81 b3       	in	r24, 0x11	; 17
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	81 bb       	out	0x11, r24	; 17
	
	TCCR1A |= (1 << WGM10); //Fast PWM mode
  de:	8f b5       	in	r24, 0x2f	; 47
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << WGM11); //Fast PWM mode
  e4:	8f b5       	in	r24, 0x2f	; 47
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12); //Fast PWM mode
  ea:	8e b5       	in	r24, 0x2e	; 46
  ec:	88 60       	ori	r24, 0x08	; 8
  ee:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << WGM13); //Fast PWM mode
  f0:	8e b5       	in	r24, 0x2e	; 46
  f2:	80 61       	ori	r24, 0x10	; 16
  f4:	8e bd       	out	0x2e, r24	; 46
	
	TCCR1A &= ~(1 << COM1A1); // Toggle
  f6:	8f b5       	in	r24, 0x2f	; 47
  f8:	8f 77       	andi	r24, 0x7F	; 127
  fa:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1A0); //Toggle
  fc:	8f b5       	in	r24, 0x2f	; 47
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1B &= ~(1 << CS12); //Clock select bit
 102:	8e b5       	in	r24, 0x2e	; 46
 104:	8b 7f       	andi	r24, 0xFB	; 251
 106:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1 << CS11); //Clock select bit
 108:	8e b5       	in	r24, 0x2e	; 46
 10a:	8d 7f       	andi	r24, 0xFD	; 253
 10c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10); //Clock select bit
 10e:	8e b5       	in	r24, 0x2e	; 46
 110:	81 60       	ori	r24, 0x01	; 1
 112:	8e bd       	out	0x2e, r24	; 46
	
	TCCR1A &= ~(1 << FOC1A); // Had to be zero
 114:	8f b5       	in	r24, 0x2f	; 47
 116:	87 7f       	andi	r24, 0xF7	; 247
 118:	8f bd       	out	0x2f, r24	; 47
	
	OCR1AH = 0x0;
 11a:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0x1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	8a bd       	out	0x2a, r24	; 42
	
	DDRD &= ~(1 << DDD4); // Set PD4 to input
 120:	81 b3       	in	r24, 0x11	; 17
 122:	8f 7e       	andi	r24, 0xEF	; 239
 124:	81 bb       	out	0x11, r24	; 17
	
	uint8_t* x_pos_offset = (uint8_t *) (ADDRESS_SRAM + 4); // Plusser på 4 fordi på denne minneadressen skal vi lagre en float, som tar opp 4 bytes, altså må vi ha 4 minneaddresser
	*x_pos_offset = 0;
 126:	10 92 04 18 	sts	0x1804, r1	; 0x801804 <__bss_end+0x16f4>
	uint8_t* y_pos_offset = (uint8_t *) ( ADDRESS_SRAM + 8); 
	*y_pos_offset = 0;
 12a:	10 92 08 18 	sts	0x1808, r1	; 0x801808 <__bss_end+0x16f8>
	
	calibrate_joy_stick();
 12e:	0e 94 65 00 	call	0xca	; 0xca <calibrate_joy_stick>
 132:	08 95       	ret

00000134 <OLED_write_command>:
	OLED_write_data(0b00011000);
	OLED_write_data(0b01111110);
	OLED_write_data(0b00111100);
	OLED_write_data(0b00011000);
	OLED_write_data(0b00010000);
	OLED_write_data(0b11111111);
 134:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xef0>
 138:	08 95       	ret

0000013a <OLED_init>:
 13a:	8e ea       	ldi	r24, 0xAE	; 174
 13c:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 140:	81 ea       	ldi	r24, 0xA1	; 161
 142:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 146:	8a ed       	ldi	r24, 0xDA	; 218
 148:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 14c:	82 e1       	ldi	r24, 0x12	; 18
 14e:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 152:	88 ec       	ldi	r24, 0xC8	; 200
 154:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 158:	88 ea       	ldi	r24, 0xA8	; 168
 15a:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 164:	85 ed       	ldi	r24, 0xD5	; 213
 166:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 16a:	80 e8       	ldi	r24, 0x80	; 128
 16c:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 170:	81 e8       	ldi	r24, 0x81	; 129
 172:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 176:	80 e5       	ldi	r24, 0x50	; 80
 178:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 17c:	89 ed       	ldi	r24, 0xD9	; 217
 17e:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 182:	81 e2       	ldi	r24, 0x21	; 33
 184:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 188:	80 e2       	ldi	r24, 0x20	; 32
 18a:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 194:	8b ed       	ldi	r24, 0xDB	; 219
 196:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 19a:	80 e3       	ldi	r24, 0x30	; 48
 19c:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 1a0:	8d ea       	ldi	r24, 0xAD	; 173
 1a2:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 1ac:	80 e4       	ldi	r24, 0x40	; 64
 1ae:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 1b2:	84 ea       	ldi	r24, 0xA4	; 164
 1b4:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 1b8:	86 ea       	ldi	r24, 0xA6	; 166
 1ba:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 1be:	8f ea       	ldi	r24, 0xAF	; 175
 1c0:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 1c4:	08 95       	ret

000001c6 <OLED_write_data>:
 1c6:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0x10f0>
 1ca:	08 95       	ret

000001cc <OLED_pos>:
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	c8 2f       	mov	r28, r24
 1d2:	d6 2f       	mov	r29, r22
 1d4:	81 e2       	ldi	r24, 0x21	; 33
 1d6:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 1da:	8d 2f       	mov	r24, r29
 1dc:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 1e0:	8f e7       	ldi	r24, 0x7F	; 127
 1e2:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 1e6:	82 e2       	ldi	r24, 0x22	; 34
 1e8:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 1ec:	8c 2f       	mov	r24, r28
 1ee:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 1f2:	87 e0       	ldi	r24, 0x07	; 7
 1f4:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_write_command>
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <OLED_clear_line>:
}

void OLED_clear_line(uint8_t page){
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
	OLED_pos(page,0);
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	0e 94 e6 00 	call	0x1cc	; 0x1cc <OLED_pos>
	for (int i = 0; i < 128;i++){
 208:	c0 e0       	ldi	r28, 0x00	; 0
 20a:	d0 e0       	ldi	r29, 0x00	; 0
 20c:	04 c0       	rjmp	.+8      	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
		OLED_write_data(0b00000000);
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <OLED_write_data>
	OLED_write_data(0b11111111);
}

void OLED_clear_line(uint8_t page){
	OLED_pos(page,0);
	for (int i = 0; i < 128;i++){
 214:	21 96       	adiw	r28, 0x01	; 1
 216:	c0 38       	cpi	r28, 0x80	; 128
 218:	d1 05       	cpc	r29, r1
 21a:	cc f3       	brlt	.-14     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
		OLED_write_data(0b00000000);
	}
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <OLED_reset>:

void OLED_reset(){
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
	OLED_pos(0,0);
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <OLED_pos>
	for (int i=0; i < 8; i++){
 22e:	c0 e0       	ldi	r28, 0x00	; 0
 230:	d0 e0       	ldi	r29, 0x00	; 0
 232:	04 c0       	rjmp	.+8      	; 0x23c <OLED_reset+0x1a>
		OLED_clear_line(i);
 234:	8c 2f       	mov	r24, r28
 236:	0e 94 ff 00 	call	0x1fe	; 0x1fe <OLED_clear_line>
	}
}

void OLED_reset(){
	OLED_pos(0,0);
	for (int i=0; i < 8; i++){
 23a:	21 96       	adiw	r28, 0x01	; 1
 23c:	c8 30       	cpi	r28, 0x08	; 8
 23e:	d1 05       	cpc	r29, r1
 240:	cc f3       	brlt	.-14     	; 0x234 <OLED_reset+0x12>
		OLED_clear_line(i);
	}
	OLED_pos(0,0);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 e6 00 	call	0x1cc	; 0x1cc <OLED_pos>
}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <xmem_init>:
 */
 
#include "xmem.h"

void xmem_init (void){
	MCUCR |= (1 << SRE); // Enable XMEM
 250:	85 b7       	in	r24, 0x35	; 53
 252:	80 68       	ori	r24, 0x80	; 128
 254:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2); // Fjerner JTAG-bitsene fra external memory address, se side 32 i ATmega datablad
 256:	80 b7       	in	r24, 0x30	; 48
 258:	80 62       	ori	r24, 0x20	; 32
 25a:	80 bf       	out	0x30, r24	; 48
 25c:	08 95       	ret

0000025e <uart_write>:

void uart_write(unsigned char letter){
	/*1. Sjekke om det er klart til å sende ny data
	2. sende ny data*/
	 
	while(!(UCSR0A & (1<<UDRE0))){
 25e:	5d 9b       	sbis	0x0b, 5	; 11
 260:	fe cf       	rjmp	.-4      	; 0x25e <uart_write>
		
	}
	UDR0 = letter;
 262:	8c b9       	out	0x0c, r24	; 12
 264:	08 95       	ret

00000266 <uart_read>:
}

unsigned char uart_read(){
	while (!(UCSR0A & (1 << RXC0))){
 266:	5f 9b       	sbis	0x0b, 7	; 11
 268:	fe cf       	rjmp	.-4      	; 0x266 <uart_read>
		
	}
	return UDR0;
 26a:	8c b1       	in	r24, 0x0c	; 12
}
 26c:	08 95       	ret

0000026e <uart_init>:

#include "uart.h"

void uart_init(unsigned int ubrr){
	//Set baud rate, divided into two registers
	UBRR0H = (unsigned char)(ubrr>>8); //high register, alt får egt plass på 8 bit så derfor blir det 0
 26e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr; //low register
 270:	89 b9       	out	0x09, r24	; 9
				
	/* Enable receiver and transmitter 
	hvor mange bit data: man kan ha 5-9 bit, vi vil ha 8
	hvor mange stop-bit: 2 stk, pga ignorerer det første bitet*/
			
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 272:	88 e1       	ldi	r24, 0x18	; 24
 274:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << URSEL0)|(1<< USBS0)|(3 << UCSZ00);
 276:	8e e8       	ldi	r24, 0x8E	; 142
 278:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uart_write, uart_read);
 27a:	63 e3       	ldi	r22, 0x33	; 51
 27c:	71 e0       	ldi	r23, 0x01	; 1
 27e:	8f e2       	ldi	r24, 0x2F	; 47
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0e 94 53 01 	call	0x2a6	; 0x2a6 <fdevopen>
 286:	08 95       	ret

00000288 <main>:
#include "test.h"
#include "xmem.h"
#include "oled.h"

int main(void){
	uart_init(MYUBRR);
 288:	8f e1       	ldi	r24, 0x1F	; 31
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 37 01 	call	0x26e	; 0x26e <uart_init>
	xmem_init(); 
 290:	0e 94 28 01 	call	0x250	; 0x250 <xmem_init>
	adc_init();
 294:	0e 94 6c 00 	call	0xd8	; 0xd8 <adc_init>
	
	OLED_init();
 298:	0e 94 9d 00 	call	0x13a	; 0x13a <OLED_init>
	OLED_reset();
 29c:	0e 94 11 01 	call	0x222	; 0x222 <OLED_reset>
	
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	08 95       	ret

000002a6 <fdevopen>:
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	00 97       	sbiw	r24, 0x00	; 0
 2b0:	31 f4       	brne	.+12     	; 0x2be <fdevopen+0x18>
 2b2:	61 15       	cp	r22, r1
 2b4:	71 05       	cpc	r23, r1
 2b6:	19 f4       	brne	.+6      	; 0x2be <fdevopen+0x18>
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	3a c0       	rjmp	.+116    	; 0x332 <fdevopen+0x8c>
 2be:	8b 01       	movw	r16, r22
 2c0:	ec 01       	movw	r28, r24
 2c2:	6e e0       	ldi	r22, 0x0E	; 14
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 9e 01 	call	0x33c	; 0x33c <calloc>
 2ce:	fc 01       	movw	r30, r24
 2d0:	89 2b       	or	r24, r25
 2d2:	91 f3       	breq	.-28     	; 0x2b8 <fdevopen+0x12>
 2d4:	80 e8       	ldi	r24, 0x80	; 128
 2d6:	83 83       	std	Z+3, r24	; 0x03
 2d8:	01 15       	cp	r16, r1
 2da:	11 05       	cpc	r17, r1
 2dc:	71 f0       	breq	.+28     	; 0x2fa <fdevopen+0x54>
 2de:	13 87       	std	Z+11, r17	; 0x0b
 2e0:	02 87       	std	Z+10, r16	; 0x0a
 2e2:	81 e8       	ldi	r24, 0x81	; 129
 2e4:	83 83       	std	Z+3, r24	; 0x03
 2e6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2ea:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 2ee:	89 2b       	or	r24, r25
 2f0:	21 f4       	brne	.+8      	; 0x2fa <fdevopen+0x54>
 2f2:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
 2f6:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
 2fa:	20 97       	sbiw	r28, 0x00	; 0
 2fc:	c9 f0       	breq	.+50     	; 0x330 <fdevopen+0x8a>
 2fe:	d1 87       	std	Z+9, r29	; 0x09
 300:	c0 87       	std	Z+8, r28	; 0x08
 302:	83 81       	ldd	r24, Z+3	; 0x03
 304:	82 60       	ori	r24, 0x02	; 2
 306:	83 83       	std	Z+3, r24	; 0x03
 308:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x2>
 30c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x3>
 310:	89 2b       	or	r24, r25
 312:	71 f4       	brne	.+28     	; 0x330 <fdevopen+0x8a>
 314:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__data_end+0x3>
 318:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__data_end+0x2>
 31c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end+0x4>
 320:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x5>
 324:	89 2b       	or	r24, r25
 326:	21 f4       	brne	.+8      	; 0x330 <fdevopen+0x8a>
 328:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <__data_end+0x5>
 32c:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <__data_end+0x4>
 330:	cf 01       	movw	r24, r30
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	08 95       	ret

0000033c <calloc>:
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	86 9f       	mul	r24, r22
 346:	80 01       	movw	r16, r0
 348:	87 9f       	mul	r24, r23
 34a:	10 0d       	add	r17, r0
 34c:	96 9f       	mul	r25, r22
 34e:	10 0d       	add	r17, r0
 350:	11 24       	eor	r1, r1
 352:	c8 01       	movw	r24, r16
 354:	0e 94 ba 01 	call	0x374	; 0x374 <malloc>
 358:	ec 01       	movw	r28, r24
 35a:	00 97       	sbiw	r24, 0x00	; 0
 35c:	29 f0       	breq	.+10     	; 0x368 <calloc+0x2c>
 35e:	a8 01       	movw	r20, r16
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	0e 94 db 02 	call	0x5b6	; 0x5b6 <memset>
 368:	ce 01       	movw	r24, r28
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

00000374 <malloc>:
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	91 05       	cpc	r25, r1
 380:	10 f4       	brcc	.+4      	; 0x386 <malloc+0x12>
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__flp>
 38a:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__flp+0x1>
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	a0 e0       	ldi	r26, 0x00	; 0
 394:	b0 e0       	ldi	r27, 0x00	; 0
 396:	30 97       	sbiw	r30, 0x00	; 0
 398:	19 f1       	breq	.+70     	; 0x3e0 <malloc+0x6c>
 39a:	40 81       	ld	r20, Z
 39c:	51 81       	ldd	r21, Z+1	; 0x01
 39e:	02 81       	ldd	r16, Z+2	; 0x02
 3a0:	13 81       	ldd	r17, Z+3	; 0x03
 3a2:	48 17       	cp	r20, r24
 3a4:	59 07       	cpc	r21, r25
 3a6:	c8 f0       	brcs	.+50     	; 0x3da <malloc+0x66>
 3a8:	84 17       	cp	r24, r20
 3aa:	95 07       	cpc	r25, r21
 3ac:	69 f4       	brne	.+26     	; 0x3c8 <malloc+0x54>
 3ae:	10 97       	sbiw	r26, 0x00	; 0
 3b0:	31 f0       	breq	.+12     	; 0x3be <malloc+0x4a>
 3b2:	12 96       	adiw	r26, 0x02	; 2
 3b4:	0c 93       	st	X, r16
 3b6:	12 97       	sbiw	r26, 0x02	; 2
 3b8:	13 96       	adiw	r26, 0x03	; 3
 3ba:	1c 93       	st	X, r17
 3bc:	27 c0       	rjmp	.+78     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
 3be:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <__flp>
 3c2:	10 93 0f 01 	sts	0x010F, r17	; 0x80010f <__flp+0x1>
 3c6:	22 c0       	rjmp	.+68     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
 3c8:	21 15       	cp	r18, r1
 3ca:	31 05       	cpc	r19, r1
 3cc:	19 f0       	breq	.+6      	; 0x3d4 <malloc+0x60>
 3ce:	42 17       	cp	r20, r18
 3d0:	53 07       	cpc	r21, r19
 3d2:	18 f4       	brcc	.+6      	; 0x3da <malloc+0x66>
 3d4:	9a 01       	movw	r18, r20
 3d6:	bd 01       	movw	r22, r26
 3d8:	ef 01       	movw	r28, r30
 3da:	df 01       	movw	r26, r30
 3dc:	f8 01       	movw	r30, r16
 3de:	db cf       	rjmp	.-74     	; 0x396 <malloc+0x22>
 3e0:	21 15       	cp	r18, r1
 3e2:	31 05       	cpc	r19, r1
 3e4:	f9 f0       	breq	.+62     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
 3e6:	28 1b       	sub	r18, r24
 3e8:	39 0b       	sbc	r19, r25
 3ea:	24 30       	cpi	r18, 0x04	; 4
 3ec:	31 05       	cpc	r19, r1
 3ee:	80 f4       	brcc	.+32     	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 3f0:	8a 81       	ldd	r24, Y+2	; 0x02
 3f2:	9b 81       	ldd	r25, Y+3	; 0x03
 3f4:	61 15       	cp	r22, r1
 3f6:	71 05       	cpc	r23, r1
 3f8:	21 f0       	breq	.+8      	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 3fa:	fb 01       	movw	r30, r22
 3fc:	93 83       	std	Z+3, r25	; 0x03
 3fe:	82 83       	std	Z+2, r24	; 0x02
 400:	04 c0       	rjmp	.+8      	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 402:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__flp+0x1>
 406:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__flp>
 40a:	fe 01       	movw	r30, r28
 40c:	32 96       	adiw	r30, 0x02	; 2
 40e:	44 c0       	rjmp	.+136    	; 0x498 <__DATA_REGION_LENGTH__+0x98>
 410:	fe 01       	movw	r30, r28
 412:	e2 0f       	add	r30, r18
 414:	f3 1f       	adc	r31, r19
 416:	81 93       	st	Z+, r24
 418:	91 93       	st	Z+, r25
 41a:	22 50       	subi	r18, 0x02	; 2
 41c:	31 09       	sbc	r19, r1
 41e:	39 83       	std	Y+1, r19	; 0x01
 420:	28 83       	st	Y, r18
 422:	3a c0       	rjmp	.+116    	; 0x498 <__DATA_REGION_LENGTH__+0x98>
 424:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 428:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 42c:	23 2b       	or	r18, r19
 42e:	41 f4       	brne	.+16     	; 0x440 <__DATA_REGION_LENGTH__+0x40>
 430:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 434:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 438:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__brkval+0x1>
 43c:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__brkval>
 440:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 444:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 448:	21 15       	cp	r18, r1
 44a:	31 05       	cpc	r19, r1
 44c:	41 f4       	brne	.+16     	; 0x45e <__DATA_REGION_LENGTH__+0x5e>
 44e:	2d b7       	in	r18, 0x3d	; 61
 450:	3e b7       	in	r19, 0x3e	; 62
 452:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 456:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 45a:	24 1b       	sub	r18, r20
 45c:	35 0b       	sbc	r19, r21
 45e:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__brkval>
 462:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <__brkval+0x1>
 466:	e2 17       	cp	r30, r18
 468:	f3 07       	cpc	r31, r19
 46a:	a0 f4       	brcc	.+40     	; 0x494 <__DATA_REGION_LENGTH__+0x94>
 46c:	2e 1b       	sub	r18, r30
 46e:	3f 0b       	sbc	r19, r31
 470:	28 17       	cp	r18, r24
 472:	39 07       	cpc	r19, r25
 474:	78 f0       	brcs	.+30     	; 0x494 <__DATA_REGION_LENGTH__+0x94>
 476:	ac 01       	movw	r20, r24
 478:	4e 5f       	subi	r20, 0xFE	; 254
 47a:	5f 4f       	sbci	r21, 0xFF	; 255
 47c:	24 17       	cp	r18, r20
 47e:	35 07       	cpc	r19, r21
 480:	48 f0       	brcs	.+18     	; 0x494 <__DATA_REGION_LENGTH__+0x94>
 482:	4e 0f       	add	r20, r30
 484:	5f 1f       	adc	r21, r31
 486:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <__brkval+0x1>
 48a:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <__brkval>
 48e:	81 93       	st	Z+, r24
 490:	91 93       	st	Z+, r25
 492:	02 c0       	rjmp	.+4      	; 0x498 <__DATA_REGION_LENGTH__+0x98>
 494:	e0 e0       	ldi	r30, 0x00	; 0
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	cf 01       	movw	r24, r30
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	08 95       	ret

000004a4 <free>:
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	00 97       	sbiw	r24, 0x00	; 0
 4aa:	09 f4       	brne	.+2      	; 0x4ae <free+0xa>
 4ac:	81 c0       	rjmp	.+258    	; 0x5b0 <__stack+0xb1>
 4ae:	fc 01       	movw	r30, r24
 4b0:	32 97       	sbiw	r30, 0x02	; 2
 4b2:	13 82       	std	Z+3, r1	; 0x03
 4b4:	12 82       	std	Z+2, r1	; 0x02
 4b6:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__flp>
 4ba:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__flp+0x1>
 4be:	10 97       	sbiw	r26, 0x00	; 0
 4c0:	81 f4       	brne	.+32     	; 0x4e2 <free+0x3e>
 4c2:	20 81       	ld	r18, Z
 4c4:	31 81       	ldd	r19, Z+1	; 0x01
 4c6:	82 0f       	add	r24, r18
 4c8:	93 1f       	adc	r25, r19
 4ca:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 4ce:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 4d2:	28 17       	cp	r18, r24
 4d4:	39 07       	cpc	r19, r25
 4d6:	51 f5       	brne	.+84     	; 0x52c <__stack+0x2d>
 4d8:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <__brkval+0x1>
 4dc:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <__brkval>
 4e0:	67 c0       	rjmp	.+206    	; 0x5b0 <__stack+0xb1>
 4e2:	ed 01       	movw	r28, r26
 4e4:	20 e0       	ldi	r18, 0x00	; 0
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	ce 17       	cp	r28, r30
 4ea:	df 07       	cpc	r29, r31
 4ec:	40 f4       	brcc	.+16     	; 0x4fe <free+0x5a>
 4ee:	4a 81       	ldd	r20, Y+2	; 0x02
 4f0:	5b 81       	ldd	r21, Y+3	; 0x03
 4f2:	9e 01       	movw	r18, r28
 4f4:	41 15       	cp	r20, r1
 4f6:	51 05       	cpc	r21, r1
 4f8:	f1 f0       	breq	.+60     	; 0x536 <__stack+0x37>
 4fa:	ea 01       	movw	r28, r20
 4fc:	f5 cf       	rjmp	.-22     	; 0x4e8 <free+0x44>
 4fe:	d3 83       	std	Z+3, r29	; 0x03
 500:	c2 83       	std	Z+2, r28	; 0x02
 502:	40 81       	ld	r20, Z
 504:	51 81       	ldd	r21, Z+1	; 0x01
 506:	84 0f       	add	r24, r20
 508:	95 1f       	adc	r25, r21
 50a:	c8 17       	cp	r28, r24
 50c:	d9 07       	cpc	r29, r25
 50e:	59 f4       	brne	.+22     	; 0x526 <__stack+0x27>
 510:	88 81       	ld	r24, Y
 512:	99 81       	ldd	r25, Y+1	; 0x01
 514:	84 0f       	add	r24, r20
 516:	95 1f       	adc	r25, r21
 518:	02 96       	adiw	r24, 0x02	; 2
 51a:	91 83       	std	Z+1, r25	; 0x01
 51c:	80 83       	st	Z, r24
 51e:	8a 81       	ldd	r24, Y+2	; 0x02
 520:	9b 81       	ldd	r25, Y+3	; 0x03
 522:	93 83       	std	Z+3, r25	; 0x03
 524:	82 83       	std	Z+2, r24	; 0x02
 526:	21 15       	cp	r18, r1
 528:	31 05       	cpc	r19, r1
 52a:	29 f4       	brne	.+10     	; 0x536 <__stack+0x37>
 52c:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <__flp+0x1>
 530:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <__flp>
 534:	3d c0       	rjmp	.+122    	; 0x5b0 <__stack+0xb1>
 536:	e9 01       	movw	r28, r18
 538:	fb 83       	std	Y+3, r31	; 0x03
 53a:	ea 83       	std	Y+2, r30	; 0x02
 53c:	49 91       	ld	r20, Y+
 53e:	59 91       	ld	r21, Y+
 540:	c4 0f       	add	r28, r20
 542:	d5 1f       	adc	r29, r21
 544:	ec 17       	cp	r30, r28
 546:	fd 07       	cpc	r31, r29
 548:	61 f4       	brne	.+24     	; 0x562 <__stack+0x63>
 54a:	80 81       	ld	r24, Z
 54c:	91 81       	ldd	r25, Z+1	; 0x01
 54e:	84 0f       	add	r24, r20
 550:	95 1f       	adc	r25, r21
 552:	02 96       	adiw	r24, 0x02	; 2
 554:	e9 01       	movw	r28, r18
 556:	99 83       	std	Y+1, r25	; 0x01
 558:	88 83       	st	Y, r24
 55a:	82 81       	ldd	r24, Z+2	; 0x02
 55c:	93 81       	ldd	r25, Z+3	; 0x03
 55e:	9b 83       	std	Y+3, r25	; 0x03
 560:	8a 83       	std	Y+2, r24	; 0x02
 562:	e0 e0       	ldi	r30, 0x00	; 0
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	12 96       	adiw	r26, 0x02	; 2
 568:	8d 91       	ld	r24, X+
 56a:	9c 91       	ld	r25, X
 56c:	13 97       	sbiw	r26, 0x03	; 3
 56e:	00 97       	sbiw	r24, 0x00	; 0
 570:	19 f0       	breq	.+6      	; 0x578 <__stack+0x79>
 572:	fd 01       	movw	r30, r26
 574:	dc 01       	movw	r26, r24
 576:	f7 cf       	rjmp	.-18     	; 0x566 <__stack+0x67>
 578:	8d 91       	ld	r24, X+
 57a:	9c 91       	ld	r25, X
 57c:	11 97       	sbiw	r26, 0x01	; 1
 57e:	9d 01       	movw	r18, r26
 580:	2e 5f       	subi	r18, 0xFE	; 254
 582:	3f 4f       	sbci	r19, 0xFF	; 255
 584:	82 0f       	add	r24, r18
 586:	93 1f       	adc	r25, r19
 588:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 58c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 590:	28 17       	cp	r18, r24
 592:	39 07       	cpc	r19, r25
 594:	69 f4       	brne	.+26     	; 0x5b0 <__stack+0xb1>
 596:	30 97       	sbiw	r30, 0x00	; 0
 598:	29 f4       	brne	.+10     	; 0x5a4 <__stack+0xa5>
 59a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__flp+0x1>
 59e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__flp>
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <__stack+0xa9>
 5a4:	13 82       	std	Z+3, r1	; 0x03
 5a6:	12 82       	std	Z+2, r1	; 0x02
 5a8:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__brkval+0x1>
 5ac:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__brkval>
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <memset>:
 5b6:	dc 01       	movw	r26, r24
 5b8:	01 c0       	rjmp	.+2      	; 0x5bc <memset+0x6>
 5ba:	6d 93       	st	X+, r22
 5bc:	41 50       	subi	r20, 0x01	; 1
 5be:	50 40       	sbci	r21, 0x00	; 0
 5c0:	e0 f7       	brcc	.-8      	; 0x5ba <memset+0x4>
 5c2:	08 95       	ret

000005c4 <_exit>:
 5c4:	f8 94       	cli

000005c6 <__stop_program>:
 5c6:	ff cf       	rjmp	.-2      	; 0x5c6 <__stop_program>
